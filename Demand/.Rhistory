avgDF <- avgDF %>%
left_join(statDF %>%
filter(DIVERSION_TYPE %in% c("DIRECT", "STORAGE")) %>%
select(APPLICATION_NUMBER, AMOUNT) %>%
group_by(APPLICATION_NUMBER) %>%
summarize(Total_Cumulative_Diverted = sum(AMOUNT)),
by = "APPLICATION_NUMBER", relationship = "one-to-one")
# Add "Total_Cumulative_Use" after that
avgDF <- avgDF %>%
left_join(statDF %>%
filter(DIVERSION_TYPE == "USE") %>%
select(APPLICATION_NUMBER, AMOUNT) %>%
group_by(APPLICATION_NUMBER) %>%
summarize(Total_Cumulative_Use = sum(AMOUNT)),
by = "APPLICATION_NUMBER", relationship = "one-to-one")
# The final column to add is "Total_Use_as_a_Percent_of_Total_Diverted"
# It will be a ratio of "Total_Cumulative_Use" to "Total_Cumulative_Diverted"
# Only perform that calculation if the latter is greater than 0 and not NA
avgDF <- avgDF %>%
mutate(Total_Use_as_a_Percent_of_Total_Diverted =
if_else(!is.na(Total_Cumulative_Diverted) & Total_Cumulative_Diverted > 0,
Total_Cumulative_Use / Total_Cumulative_Diverted,
NA_real_))
# The final step of this script is to output a spreadsheet
# in a similar format as "ExpectedDemand_ExceedsFV_UnitConversion_StorVsUseVsDiv_Statistics.xlsx"
# Use a separate function to create the workbook
makeXLSX(avgDF, fvDF, monthlyDF, statDF, expectedReports, maxYear, minYear,
numRights, numYears, uniqAppNum)
# Also save a separate spreadsheet with just columns related to assessing unit conversion errors
monthlyDF %>%
select(APPLICATION_NUMBER, YEAR,
CALENDAR_YEAR_TOTAL,
FACE_VALUE_AMOUNT, IniDiv_Converted_to_AF,
Diversion_as_Percent_of_FV, Diversion_as_Percent_of_IniDiv,
Annual_Diversion_if_reported_in_Gallons, Gallons_as_percent_of_FV,
Gallons_as_percent_of_IniDiv,
Annual_Diversion_if_reported_in_GPM, GPM_as_percent_of_FV, GPM_as_percent_of_IniDiv,
Annual_Diversion_if_reported_in_GPD, GPD_as_percent_of_FV, GPD_as_percent_of_IniDiv,
Annual_Diversion_if_reported_in_CFS, CFS_as_percent_of_FV, CFS_as_percent_of_IniDiv,
QAQC_Action_Taken, QAQC_Reason) %>%
filter((Diversion_as_Percent_of_FV > 10 & FACE_VALUE_AMOUNT > 0) |
(Diversion_as_Percent_of_FV < 0.1 & Diversion_as_Percent_of_FV > 0 & FACE_VALUE_AMOUNT > 0) |
(Diversion_as_Percent_of_IniDiv > 10 & IniDiv_Converted_to_AF > 0) |
(Diversion_as_Percent_of_IniDiv < 0.1 & Diversion_as_Percent_of_IniDiv > 0 & IniDiv_Converted_to_AF > 0)) %>%
write.xlsx("OutputData/Expected_Demand_Units_QAQC.xlsx", overwrite = TRUE)
# Return nothing
return(invisible(NULL))
}
monthlyUseValues <- function (statDF) {
# Create a data frame with a water volume specified for each use type and month
# Define variables that contain the different months and use types
# (Note: The use type "Combined (Direct + Storage)" is ignored in this module)
monthNames <- month.abb %>% toupper()
useTypes <- unique(statDF$DIVERSION_TYPE) %>%
sort() %>%
str_subset("Combined ", negate = TRUE)
# Iterate through the use types and months
# Create a new data frame with this volume information
for (i in 1:length(useTypes)) {
for (j in 1:length(monthNames)) {
# Filter 'statDF' to this iteration's month and use type
# Then, sum the values in the "AMOUNT" column
# Save that result to a temporary data frame
tempDF <- statDF %>%
filter(DIVERSION_TYPE == useTypes[i] & MONTH == j) %>%
select(APPLICATION_NUMBER, YEAR, AMOUNT) %>%
group_by(APPLICATION_NUMBER, YEAR) %>%
summarize(!! paste0(monthNames[j], "_",
c("DIRECT_DIVERSION", "STORAGE_DIVERSION", "REPORTED_USE")[i]) :=
sum(AMOUNT), .groups = "keep")
# NOTE
# The use of "!!" and ":=" inside summarize() allows a string to be used
# as a column name
# If this is the first iteration of the loops
if (i == 1 && j == 1) {
# Define the main table DF with 'tempDF'
useDF <- tempDF
# Otherwise, join 'tempDF' to 'useDF'
} else {
useDF <- useDF %>%
full_join(tempDF, by = c("APPLICATION_NUMBER", "YEAR"),
relationship = "one-to-one")
}
} # End of loop j
} # End of loop i
# Return 'useDF'
return(useDF)
}
monthlyAvg <- function (monthlyDF) {
# Create a data frame with an average water volume specified for each month
# (With a different average for use types of "DIRECT" and "STORAGE")
# Include the standard deviations as well (but for "DIRECT" only)
# Define variables that contain the different months and use types
# (Note: Only the "DIRECT" and "STORAGE" use types are considered in this step)
monthNames <- month.abb %>% toupper()
useTypes <- c("DIRECT", "STORAGE")
# Iterate through the use types and months
# Create a new data frame with these averages
for (i in 1:length(useTypes)) {
for (j in 1:length(monthNames)) {
# Create a temporary string that contains the column name relevant to this iteration
# (It is based on the month and use type)
colStr <- paste0(monthNames[j], "_", useTypes[i], "_DIVERSION")
# NOTE
# Using eval() with this variable will be the equivalent of inputting
# the column name as a string in the other functions
# For the next step, if the use type is "DIRECT",
# a standard deviation will also be calculated
# In both cases, get this iteration's corresponding column
# (based on the month and use type)
# Group the data by application number and get the mean
# Save that result to a temporary data frame
if (useTypes[i] == "DIRECT") {
tempDF <- monthlyDF %>%
ungroup() %>%
select(APPLICATION_NUMBER, eval(colStr)) %>%
group_by(APPLICATION_NUMBER) %>%
summarize(!! paste0(monthNames[j], "_AVERAGE_", useTypes[i], "_DIVERSION") :=
mean(.data[[colStr]]),
!! paste0(monthNames[j], "_STDEV") :=
sd(.data[[colStr]]))
} else {
tempDF <- monthlyDF %>%
ungroup() %>%
select(APPLICATION_NUMBER, eval(colStr)) %>%
group_by(APPLICATION_NUMBER) %>%
summarize(!! paste0(monthNames[j], "_AVERAGE_", useTypes[i], "_DIVERSION") :=
mean(.data[[colStr]]))
}
# NOTES
# ungroup() is needed in case "YEAR" is currently set as one of the grouping variables
# "!!" and ":=" are used to input a string and use it as a new column name
# '.data' is wrapped around 'colStr' to allow use of the column referenced by 'colStr'
# If this is the first iteration of the loops
if (i == 1 && j == 1) {
# Define the main table DF with 'tempDF'
useDF <- tempDF
# Otherwise, join 'tempDF' to 'useDF'
} else {
useDF <- useDF %>%
full_join(tempDF, by = "APPLICATION_NUMBER", relationship = "one-to-one")
}
} # End of loop j
} # End of loop i
# Return 'useDF'
return(useDF)
}
makeXLSX <- function (avgDF, fvDF, monthlyDF, statDF, expectedReports, maxYear,
minYear, numRights, numYears, uniqAppNum) {
# Make an XLSX file whose format is similar to the module XLSX file
# Create an Excel workbook object and add a worksheet to it
wb <- createWorkbook()
addWorksheet(wb, "ReportedDiversionAnalysis")
# Add title information to the first few cells
writeData(wb, "ReportedDiversionAnalysis", "INFO:", startCol = 1, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"INPUT DIVERSION AND USE DATA  - FROM STATISTICS_FINAL.csv",
startCol = 2, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis", "ACTION:", startCol = 1, startRow = 2)
writeData(wb, "ReportedDiversionAnalysis",
"PASTE INPUT DATA FROM PRE-PROCESSING SCRIPT HERE - DELETE SAMPLE DATA BELOW",
startCol = 2, startRow = 2)
writeData(wb, "ReportedDiversionAnalysis", "CALCULATE COMPOSITE KEY INDICES",
startCol = 7, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"FILL DOWN FORMULAS TO BOTTOM OF NEW DATA RANGE, THEN CALCULATE",
startCol = 7, startRow = 2)
# Write 'statDF' to the first part of the spreadsheet
writeData(wb, "ReportedDiversionAnalysis",
statDF,
startCol = 1, startRow = 3)
# Then write 'fvDF' next
# ('statDF' should be 8 columns long, and there should be a single-column gap)
# So 'fvDF' would start on Column 10/J
writeData(wb, "ReportedDiversionAnalysis",
fvDF,
startCol = 10, startRow = 3)
# Also add the title information associated with 'fvDF'
writeData(wb, "ReportedDiversionAnalysis",
"INPUT FACE VALUE AND INITIAL REPORTED DIVERSION DATA FOR SPREADSHEET - FROM EWRIMS InFLAT FILE",
startCol = 10, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"Paste data from Statistics_FaceValue.csv",
startCol = 10, startRow = 2)
# Column 15/O should be 'uniqAppNum' (and some title information)
writeData(wb, "ReportedDiversionAnalysis",
"LIST OF WATER RIGHT APPLICATIONS",
startCol = 15, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"ARRAY, DON'T FILL DOWN",
startCol = 15, startRow = 2)
writeData(wb, "ReportedDiversionAnalysis",
uniqAppNum %>% matrix(ncol = 1) %>% data.frame() %>% set_names("UniqueApplID"),
startCol = 15, startRow = 3)
# Column 16/P contains a title, 'minYear', 'maxYear', and the labels
# "No of Water Rights", "No of Reporting Years", and "Total No of Expected Reports"
writeData(wb, "ReportedDiversionAnalysis",
"REPORTING YEARS IN DATASET (2014+)",
startCol = 16, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"MIN_YEAR",
startCol = 16, startRow = 3)
writeData(wb, "ReportedDiversionAnalysis",
minYear,
startCol = 16, startRow = 4)
writeData(wb, "ReportedDiversionAnalysis",
"MAX_YEAR",
startCol = 16, startRow = 5)
writeData(wb, "ReportedDiversionAnalysis",
maxYear,
startCol = 16, startRow = 6)
writeData(wb, "ReportedDiversionAnalysis",
"No of Water Rights",
startCol = 16, startRow = 8)
writeData(wb, "ReportedDiversionAnalysis",
"No of Reporting Years",
startCol = 16, startRow = 9)
writeData(wb, "ReportedDiversionAnalysis",
"Total No of Expected Reports",
startCol = 16, startRow = 10)
# In Column 17/Q, add the boxes related to manual override as well as
# the values for the variables names listed in Column 16
writeData(wb, "ReportedDiversionAnalysis",
"MANUAL OVERRIDE",
startCol = 17, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"SELECT CUSTOM RANGE (A NULL VALUE USES ALL AVAILABLE REPORTS)",
startCol = 17, startRow = 2)
writeData(wb, "ReportedDiversionAnalysis",
"MANUAL_MIN_YEAR",
startCol = 17, startRow = 3)
writeData(wb, "ReportedDiversionAnalysis",
"MANUAL_MAX_YEAR",
startCol = 17, startRow = 5)
writeData(wb, "ReportedDiversionAnalysis",
numRights,
startCol = 17, startRow = 8)
writeData(wb, "ReportedDiversionAnalysis",
numYears,
startCol = 17, startRow = 9)
writeData(wb, "ReportedDiversionAnalysis",
expectedReports,
startCol = 17, startRow = 10)
# In Column 19/S, there is a column of counts
# The number of 0s in this column is equal to the number of rows in 'monthlyDF'
writeData(wb, "ReportedDiversionAnalysis",
"ARRAY, DON'T FILL",
startCol = 19, startRow = 2)
writeData(wb, "ReportedDiversionAnalysis",
rep(0, nrow(monthlyDF)) %>%
matrix(ncol = 1) %>% data.frame() %>% set_names("COUNT"),
startCol = 19, startRow = 3)
# Column 20/T onwards contains variables from 'monthlyDF' with the exception
# of Column 21/U, which must be prepared right now
# (It is simply a counter for the application ID)
# This line will fill in Columns 20/T to 68/BP
writeData(wb, "ReportedDiversionAnalysis",
monthlyDF %>%
mutate(INDEX = which(uniqAppNum == APPLICATION_NUMBER)) %>%
select(YEAR, INDEX, APPLICATION_NUMBER,
JAN_DIRECT_DIVERSION, FEB_DIRECT_DIVERSION, MAR_DIRECT_DIVERSION,
APR_DIRECT_DIVERSION, MAY_DIRECT_DIVERSION, JUN_DIRECT_DIVERSION,
JUL_DIRECT_DIVERSION, AUG_DIRECT_DIVERSION, SEP_DIRECT_DIVERSION,
OCT_DIRECT_DIVERSION, NOV_DIRECT_DIVERSION, DEC_DIRECT_DIVERSION,
JAN_STORAGE_DIVERSION, FEB_STORAGE_DIVERSION, MAR_STORAGE_DIVERSION,
APR_STORAGE_DIVERSION, MAY_STORAGE_DIVERSION, JUN_STORAGE_DIVERSION,
JUL_STORAGE_DIVERSION, AUG_STORAGE_DIVERSION, SEP_STORAGE_DIVERSION,
OCT_STORAGE_DIVERSION, NOV_STORAGE_DIVERSION, DEC_STORAGE_DIVERSION,
JAN_REPORTED_USE, FEB_REPORTED_USE, MAR_REPORTED_USE,
APR_REPORTED_USE, MAY_REPORTED_USE, JUN_REPORTED_USE,
JUL_REPORTED_USE, AUG_REPORTED_USE, SEP_REPORTED_USE,
OCT_REPORTED_USE, NOV_REPORTED_USE, DEC_REPORTED_USE,
ANNUAL_DIRECT, ANNUAL_STORAGE, DUPLICATE_STORAGE_USE,
DUPLICATE_DIRECT_STORAGE, CALENDAR_YEAR_TOTAL, MAY_TO_SEP_TOTAL_DIVERSION,
FACE_VALUE_AMOUNT, INI_REPORTED_DIV_AMOUNT, INI_REPORTED_DIV_UNIT,
IniDiv_Converted_to_AF),
startCol = 20, startRow = 3)
# The title cells from Columns T to BL will need to be added as well
writeData(wb, "ReportedDiversionAnalysis",
"RESULTS TABLE - MONTHLY REPORTED DIRECT DIVERSION BY CALENDAR YEAR",
startCol = 20, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"FILL DOWN FORMULAS - DO NOT MODIFY FORMULAS",
startCol = 20, startRow = 2)
# Column 35/AI
writeData(wb, "ReportedDiversionAnalysis",
"RESULTS TABLE - MONTHLY REPORTED STORAGE DIVERSION BY CALENDAR YEAR",
startCol = 35, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"FILL DOWN FORMULAS - DO NOT MODIFY FORMULAS",
startCol = 35, startRow = 2)
# Column 47/AU
writeData(wb, "ReportedDiversionAnalysis",
"RESULTS TABLE - MONTHLY REPORTED USE BY CALENDAR YEAR",
startCol = 47, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"FILL DOWN FORMULAS - DO NOT MODIFY FORMULAS",
startCol = 47, startRow = 2)
# Column 59/BG
writeData(wb, "ReportedDiversionAnalysis",
"TOTAL ANNUAL DIRECT DIVERSION",
startCol = 59, startRow = 1)
# Column 60/BH
writeData(wb, "ReportedDiversionAnalysis",
"TOTAL ANNUAL STORAGE DIVERSION",
startCol = 60, startRow = 1)
# Column 61/BI
writeData(wb, "ReportedDiversionAnalysis",
"DUPLICATE DIVERSION, STORAGE, AND USE",
startCol = 61, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
'"DUPLICATE_STOR_USE"  INDICATES POTENTIAL REPORTING ERROR - INACCURATE REPORTING OF STORAGE AND/OR USE',
startCol = 61, startRow = 2)
# Column 62/BJ
writeData(wb, "ReportedDiversionAnalysis",
"DUPLICATE DIVERSION, STORAGE, AND USE",
startCol = 62, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
'"DUPLICATE_DIV_STOR"  INDICATES POTENTIAL REPORTING ERROR - DOUBLE COUNTING',
startCol = 62, startRow = 2)
# Column 63/BK
writeData(wb, "ReportedDiversionAnalysis",
"TOTAL ANNUAL REPORTED DIVERSION BY CALENDAR YEAR",
startCol = 63, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"HISTORIC ANNUAL TOTAL (DIRECT + STOR) DEMAND",
startCol = 63, startRow = 2)
# Column 64/BL
writeData(wb, "ReportedDiversionAnalysis",
"TOTAL DRY-SEASON REPORTED DIVERSION",
startCol = 64, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"HISTORIC DRY YEAR DEMAND",
startCol = 64, startRow = 2)
# Column 65/BM
writeData(wb, "ReportedDiversionAnalysis",
"EXPECTED MAXIMUM ANNUAL TOTAL DIVERSIONS",
startCol = 65, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"BASED ON FACE VALUE OR INITIAL REPORTED DIVERSION AMOUNT",
startCol = 65, startRow = 2)
# For Columns 69/BQ to 78/BZ, use 'monthlyDF' again
# Column 69/BQ will be a renamed version of "CALENDAR_YEAR_TOTAL"
writeData(wb, "ReportedDiversionAnalysis",
monthlyDF %>%
ungroup() %>%
rename(AnnualTotalDiversion = CALENDAR_YEAR_TOTAL) %>%
select(AnnualTotalDiversion, ANNUAL_USE, Diversion_as_Percent_of_FV,
Amount_over_FV, Diversion_as_Percent_of_IniDiv,
Amount_over_IniDiv, Annual_Diversion_if_reported_in_Gallons,
Annual_Diversion_if_reported_in_GPM, Annual_Diversion_if_reported_in_GPD,
Annual_Diversion_if_reported_in_CFS),
startCol = 69, startRow = 3)
# Fill in the title cells over these columns next
# Column 69/BQ
writeData(wb, "ReportedDiversionAnalysis",
"TOTAL ANNUAL DIVERSION",
startCol = 69, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"FOR REFERENCE/ INTERMEDIATE CALC",
startCol = 69, startRow = 2)
# Column 70/BR
writeData(wb, "ReportedDiversionAnalysis",
"TOTAL ANNUAL USE",
startCol = 70, startRow = 1)
# Column 71/BS
writeData(wb, "ReportedDiversionAnalysis",
"CHECK IF DIVERSION EXCEEDS FACE VALUE",
startCol = 71, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"RATIO SHOULD NOT EXCEED 1",
startCol = 71, startRow = 2)
# Column 72/BT
writeData(wb, "ReportedDiversionAnalysis",
"PRIORITIZE REVIEW BASED ON VOLUME",
startCol = 72, startRow = 2)
# Column 73/BU
writeData(wb, "ReportedDiversionAnalysis",
"CHECK IF DIVERSION EXCEEDS INITIAL REPORTED DIVERSION",
startCol = 73, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"RATIO SHOULD NOT EXCEED 1",
startCol = 73, startRow = 2)
# Column 74/BV
writeData(wb, "ReportedDiversionAnalysis",
"PRIORITIZE REVIEW BASED ON VOLUME",
startCol = 74, startRow = 2)
# Column 75/BW
writeData(wb, "ReportedDiversionAnalysis",
"GALLONS UNIT CONVERSION ERROR",
startCol = 75, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"CHECK IF UNITS OF GALLONS MAKE MORE SENSE THAN ACRE-FEET",
startCol = 75, startRow = 2)
# Column 76/BX
writeData(wb, "ReportedDiversionAnalysis",
"GALLONS PER MINUTE UNIT CONVERSION ERROR",
startCol = 76, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"CHECK IF UNITS OF GPM MAKE MORE SENSE THAN ACRE-FEET",
startCol = 76, startRow = 2)
# Column 77/BY
writeData(wb, "ReportedDiversionAnalysis",
"GALLONS PER DAY UNIT CONVERSION ERROR",
startCol = 77, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"CHECK IF UNITS OF GPD MAKE MORE SINCE THAN ACRE-FEET",
startCol = 77, startRow = 2)
# Column 78/BZ
writeData(wb, "ReportedDiversionAnalysis",
"CUBIC FEET PER SECOND UNIT CONVERSION ERROR",
startCol = 78, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"CHECK IF UNITS OF CFS MAKE MORE SINCE THAN ACRE-FEET",
startCol = 78, startRow = 2)
# After that, data from 'avgDF' will be input
# It will fill in columns from Column 80/CB to Column 135/EE
writeData(wb, "ReportedDiversionAnalysis",
avgDF %>%
select(APPLICATION_NUMBER,
JAN_AVERAGE_DIRECT_DIVERSION, FEB_AVERAGE_DIRECT_DIVERSION,
MAR_AVERAGE_DIRECT_DIVERSION, APR_AVERAGE_DIRECT_DIVERSION,
MAY_AVERAGE_DIRECT_DIVERSION, JUN_AVERAGE_DIRECT_DIVERSION,
JUL_AVERAGE_DIRECT_DIVERSION, AUG_AVERAGE_DIRECT_DIVERSION,
SEP_AVERAGE_DIRECT_DIVERSION, OCT_AVERAGE_DIRECT_DIVERSION,
NOV_AVERAGE_DIRECT_DIVERSION, DEC_AVERAGE_DIRECT_DIVERSION,
JAN_AVERAGE_STORAGE_DIVERSION, FEB_AVERAGE_STORAGE_DIVERSION,
MAR_AVERAGE_STORAGE_DIVERSION, APR_AVERAGE_STORAGE_DIVERSION,
MAY_AVERAGE_STORAGE_DIVERSION, JUN_AVERAGE_STORAGE_DIVERSION,
JUL_AVERAGE_STORAGE_DIVERSION, AUG_AVERAGE_STORAGE_DIVERSION,
SEP_AVERAGE_STORAGE_DIVERSION, OCT_AVERAGE_STORAGE_DIVERSION,
NOV_AVERAGE_STORAGE_DIVERSION, DEC_AVERAGE_STORAGE_DIVERSION,
JAN_EXPECTED_TOTAL_DIVERSION, FEB_EXPECTED_TOTAL_DIVERSION,
MAR_EXPECTED_TOTAL_DIVERSION, APR_EXPECTED_TOTAL_DIVERSION,
MAY_EXPECTED_TOTAL_DIVERSION, JUN_EXPECTED_TOTAL_DIVERSION,
JUL_EXPECTED_TOTAL_DIVERSION, AUG_EXPECTED_TOTAL_DIVERSION,
SEP_EXPECTED_TOTAL_DIVERSION, OCT_EXPECTED_TOTAL_DIVERSION,
NOV_EXPECTED_TOTAL_DIVERSION, DEC_EXPECTED_TOTAL_DIVERSION,
ANNUAL_TOTAL_DIVERSION, MAY_TO_SEP_TOTAL_DIVERSION, TOTAL_ANNUAL_USE,
JAN_STDEV, FEB_STDEV, MAR_STDEV, APR_STDEV, MAY_STDEV, JUN_STDEV,
JUL_STDEV, AUG_STDEV, SEP_STDEV, OCT_STDEV, NOV_STDEV, DEC_STDEV,
AVERAGE_STDEV, Total_Cumulative_Diverted, Total_Cumulative_Use,
Total_Use_as_a_Percent_of_Total_Diverted),
startCol = 80, startRow = 3)
# Add title cells for these columns
# Column 80/CB
writeData(wb, "ReportedDiversionAnalysis",
"RESULTS TABLE - AVERAGE MONTHLY REPORTED DIRECT DIVERSION BY WATER RIGHT",
startCol = 80, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"FOR USE IN ESTIMATING EXPECTED DEMAND",
startCol = 80, startRow = 2)
# Column 93/CO
writeData(wb, "ReportedDiversionAnalysis",
"RESULTS TABLE - AVERAGE MONTHLY REPORTED STORAGE DIVERSION BY WATER RIGHT",
startCol = 93, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"FOR USE IN ESTIMATING EXPECTED DEMAND",
startCol = 93, startRow = 2)
# Column 105/DA
writeData(wb, "ReportedDiversionAnalysis",
"RESULTS TABLE - AVERAGE MONTHLY REPORTED TOTAL DIVERSION (DIRECT+STORAGE) BY WATER RIGHT",
startCol = 105, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"FOR USE IN ESTIMATING EXPECTED DEMAND",
startCol = 105, startRow = 2)
# Column 117/DM, 118/DN, and 119/DO
writeData(wb, "ReportedDiversionAnalysis",
"AVERAGE ANNUAL REPORTED DIVERSION (DIRECT + STORAGE)",
startCol = 117, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"AVERAGE DRY-SEASON REPORTED DIVERSION (DIRECT + STORAGE)",
startCol = 118, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"AVERAGE ANNUAL REPORTED USE",
startCol = 119, startRow = 1)
# Column 120/DP
writeData(wb, "ReportedDiversionAnalysis",
"STANDARD DEVIATION CALCULATIONS",
startCol = 120, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"FILL DOWN FORMULA - DO NOT MODIFY FORMULA",
startCol = 120, startRow = 2)
# Column 122/DR
writeData(wb, "ReportedDiversionAnalysis",
"STANDARD DEVIATION PER MONTH ACROSS REPORTS (YEARS)",
startCol = 122, startRow = 1)
# Column 132/EB
writeData(wb, "ReportedDiversionAnalysis",
"AVERAGE STANDARD DEVIATION PER MONTH ACROSS REPORTS (YEARS)",
startCol = 132, startRow = 1)
writeData(wb, "ReportedDiversionAnalysis",
"Sort by this field - The larger this value, the more variation in the reporting from year to year (potential error)",
startCol = 132, startRow = 2)
# Column 133/EC
writeData(wb, "ReportedDiversionAnalysis",
"COMPARING TOTAL USE TO TOTAL DIVERSION",
startCol = 133, startRow = 1)
# Column 135/EE
writeData(wb, "ReportedDiversionAnalysis",
"RATIO OF TOTAL USE TO TOTAL DIVERSION SHOULD APPROACH 1 OVER TIME. CANNOT USE MORE WATER THAN DIVERTED",
startCol = 135, startRow = 2)
# Finally, save the workbook as a file
saveWorkbook(wb,
"OutputData/ExpectedDemand_ExceedsFV_UnitConversion_StorVsUseVsDiv_Statistics_Scripted.xlsx",
overwrite = TRUE)
# Return nothing
return(invisible(NULL))
}
#### Script Execution ####
mainProcedure()
statDF <- read.csv("IntermediateData/Statistics_FINAL.csv")
