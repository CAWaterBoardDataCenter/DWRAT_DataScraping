if_else(OCT_DIRECT == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 11,
if_else(NOV_DIRECT == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 12,
if_else(DEC_DIRECT == "IN_SEASON", "IN_SEASON", ""),
"")))))))))))))
# Create a similar variable for storage
oosDF <- oosDF %>%
mutate(`month in STOR season?` =
if_else(MONTH == 1,
if_else(JAN_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 2,
if_else(FEB_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 3,
if_else(MAR_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 4,
if_else(APR_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 5,
if_else(MAY_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 6,
if_else(JUN_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 7,
if_else(JUL_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 8,
if_else(AUG_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 9,
if_else(SEP_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 10,
if_else(OCT_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 11,
if_else(NOV_STORAGE == "IN_SEASON", "IN_SEASON", ""),
if_else(MONTH == 12,
if_else(DEC_STORAGE == "IN_SEASON", "IN_SEASON", ""),
"")))))))))))))
# The next column checks if the reported DD usage is out-of-season
# If the row is for "DIRECT" use with a non-zero "AMOUNT" specified while
# "month in DIRECT season?" is empty (""), an out-of-season diversion occurred
# and this column will have the value "OUT_OF_SEASON_DIRECT"; otherwise it is empty
oosDF <- oosDF %>%
mutate(OUT_OF_SEASON_DIRECT =
if_else(DIVERSION_TYPE == "DIRECT" & `month in DIRECT season?` == "" & AMOUNT > 0,
"OUT_OF_SEASON_DIRECT",
""))
# Create a similar column for out-of-season storage
oosDF <- oosDF %>%
mutate(OUT_OF_SEASON_STOR =
if_else(DIVERSION_TYPE == "STORAGE" & `month in STOR season?` == "" & AMOUNT > 0,
"OUT_OF_SEASON_STOR",
""))
# The next column is a binary counter column
# If the row is an out-of-season use (either "DIRECT" or "STOR"), the value is 1
# Otherwise, its value is 0
oosDF <- oosDF %>%
mutate(DIVERSION_OUT_OF_SEASON_RECORD =
if_else(OUT_OF_SEASON_DIRECT == "OUT_OF_SEASON_DIRECT" |
OUT_OF_SEASON_STOR == "OUT_OF_SEASON_STOR",
1,
0))
# The final new column will be a summary of counts based on "DIVERSION_OUT_OF_SEASON_RECORD"
# For each unique application number, a count of records for out-of-season use will be calculated
oosCounts <- oosDF %>%
group_by(APPLICATION_NUMBER) %>%
summarize(`NUMBER OF OUT OF SEASON RECORDS` = sum(DIVERSION_OUT_OF_SEASON_RECORD))
diverDF %>%
select(APPL_ID, USE_STATUS, DIRECT_SEASON_START_MONTH_1, DIRECT_DIV_SEASON_END_MONTH_1, DIRECT_SEASON_START_MONTH_2, DIRECT_DIV_SEASON_END_MONTH_2,
STORAGE_SEASON_START_MONTH_1, STORAGE_SEASON_END_MONTH_1, STORAGE_SEASON_START_MONTH_2, STORAGE_SEASON_END_MONTH_2, NO_DD_SEASON_INFO, NO_STOR_SEASON_INFO, NO_SEASON_INFO,
WRAP_AROUND_SEASON_DD, WRAP_AROUND_SEASON_STOR, JAN_DD_AUTH_NOTWRAPAROUND, FEB_DD_AUTH_NOTWRAPAROUND, MAR_DD_AUTH_NOTWRAPAROUND, APR_DD_AUTH_NOTWRAPAROUND, MAY_DD_AUTH_NOTWRAPAROUND,
JUN_DD_AUTH_NOTWRAPAROUND, JUL_DD_AUTH_NOTWRAPAROUND, AUG_DD_AUTH_NOTWRAPAROUND, SEP_DD_AUTH_NOTWRAPAROUND, OCT_DD_AUTH_NOTWRAPAROUND, NOV_DD_AUTH_NOTWRAPAROUND, DEC_DD_AUTH_NOTWRAPAROUND,
JAN_DD_AUTH_WRAPAROUND, FEB_DD_AUTH_WRAPAROUND, MAR_DD_AUTH_WRAPAROUND, APR_DD_AUTH_WRAPAROUND, MAY_DD_AUTH_WRAPAROUND, JUN_DD_AUTH_WRAPAROUND, JUL_DD_AUTH_WRAPAROUND, AUG_DD_AUTH_WRAPAROUND,
SEP_DD_AUTH_WRAPAROUND, OCT_DD_AUTH_WRAPAROUND, NOV_DD_AUTH_WRAPAROUND, DEC_DD_AUTH_WRAPAROUND, NO_DD_SEASON2_INFO, NO_STOR_SEASON2_INFO, NO_SEASON2_INFO, WRAP_AROUND_SEASON2_DD,
WRAP_AROUND_SEASON2_STOR, JAN_DD_AUTH_NOTWRAPAROUND2, FEB_DD_AUTH_NOTWRAPAROUND2, MAR_DD_AUTH_NOTWRAPAROUND2, APR_DD_AUTH_NOTWRAPAROUND2, MAY_DD_AUTH_NOTWRAPAROUND2, JUN_DD_AUTH_NOTWRAPAROUND2,
JUL_DD_AUTH_NOTWRAPAROUND2, AUG_DD_AUTH_NOTWRAPAROUND2, SEP_DD_AUTH_NOTWRAPAROUND2, OCT_DD_AUTH_NOTWRAPAROUND2, NOV_DD_AUTH_NOTWRAPAROUND2, DEC_DD_AUTH_NOTWRAPAROUND2, JAN_DD_AUTH_WRAPAROUND2,
FEB_DD_AUTH_WRAPAROUND2, MAR_DD_AUTH_WRAPAROUND2, APR_DD_AUTH_WRAPAROUND2, MAY_DD_AUTH_WRAPAROUND2, JUN_DD_AUTH_WRAPAROUND2, JUL_DD_AUTH_WRAPAROUND2, AUG_DD_AUTH_WRAPAROUND2,
SEP_DD_AUTH_WRAPAROUND2, OCT_DD_AUTH_WRAPAROUND2, NOV_DD_AUTH_WRAPAROUND2, DEC_DD_AUTH_WRAPAROUND2, JAN_DD_AUTH, FEB_DD_AUTH, MAR_DD_AUTH, APR_DD_AUTH, MAY_DD_AUTH, JUN_DD_AUTH, JUL_DD_AUTH,
AUG_DD_AUTH, SEP_DD_AUTH, OCT_DD_AUTH, NOV_DD_AUTH, DEC_DD_AUTH, JAN_STOR_AUTH_NOTWRAPAROUND2, FEB_STOR_AUTH_NOTWRAPAROUND2, MAR_STOR_AUTH_NOTWRAPAROUND2, APR_STOR_AUTH_NOTWRAPAROUND2,
MAY_STOR_AUTH_NOTWRAPAROUND2, JUN_STOR_AUTH_NOTWRAPAROUND2, JUL_STOR_AUTH_NOTWRAPAROUND2, AUG_STOR_AUTH_NOTWRAPAROUND2, SEP_STOR_AUTH_NOTWRAPAROUND2, OCT_STOR_AUTH_NOTWRAPAROUND2,
NOV_STOR_AUTH_NOTWRAPAROUND2, DEC_STOR_AUTH_NOTWRAPAROUND2, JAN_STOR_AUTH_WRAPAROUND2, FEB_STOR_AUTH_WRAPAROUND2, MAR_STOR_AUTH_WRAPAROUND2, APR_STOR_AUTH_WRAPAROUND2, MAY_STOR_AUTH_WRAPAROUND2,
JUN_STOR_AUTH_WRAPAROUND2, JUL_STOR_AUTH_WRAPAROUND2, AUG_STOR_AUTH_WRAPAROUND2, SEP_STOR_AUTH_WRAPAROUND2, OCT_STOR_AUTH_WRAPAROUND2, NOV_STOR_AUTH_WRAPAROUND2, DEC_STOR_AUTH_WRAPAROUND2,
JAN_STOR_AUTH_NOTWRAPAROUND, FEB_STOR_AUTH_NOTWRAPAROUND, MAR_STOR_AUTH_NOTWRAPAROUND, APR_STOR_AUTH_NOTWRAPAROUND, MAY_STOR_AUTH_NOTWRAPAROUND, JUN_STOR_AUTH_NOTWRAPAROUND, JUL_STOR_AUTH_NOTWRAPAROUND,
AUG_STOR_AUTH_NOTWRAPAROUND, SEP_STOR_AUTH_NOTWRAPAROUND, OCT_STOR_AUTH_NOTWRAPAROUND, NOV_STOR_AUTH_NOTWRAPAROUND, DEC_STOR_AUTH_NOTWRAPAROUND, JAN_STOR_AUTH_WRAPAROUND, FEB_STOR_AUTH_WRAPAROUND,
MAR_STOR_AUTH_WRAPAROUND, APR_STOR_AUTH_WRAPAROUND, MAY_STOR_AUTH_WRAPAROUND, JUN_STOR_AUTH_WRAPAROUND, JUL_STOR_AUTH_WRAPAROUND, AUG_STOR_AUTH_WRAPAROUND, SEP_STOR_AUTH_WRAPAROUND, OCT_STOR_AUTH_WRAPAROUND,
NOV_STOR_AUTH_WRAPAROUND, DEC_STOR_AUTH_WRAPAROUND, JAN_STOR_AUTH, FEB_STOR_AUTH, MAR_STOR_AUTH, APR_STOR_AUTH, MAY_STOR_AUTH, JUN_STOR_AUTH, JUL_STOR_AUTH, AUG_STOR_AUTH, SEP_STOR_AUTH, OCT_STOR_AUTH,
NOV_STOR_AUTH, DEC_STOR_AUTH, `1_DIRECT`, `2_DIRECT`, `3_DIRECT`, `4_DIRECT`, `5_DIRECT`, `6_DIRECT`, `7_DIRECT`, `8_DIRECT`, `9_DIRECT`, `10_DIRECT`, `11_DIRECT`, `12_DIRECT`, `1_STORAGE`, `2_STORAGE`,
`3_STORAGE`, `4_STORAGE`, `5_STORAGE`, `6_STORAGE`, `7_STORAGE`, `8_STORAGE`, `9_STORAGE`, `10_STORAGE`, `11_STORAGE`, `12_STORAGE`)
diverDF %>%
select(APPLICATION_NUMBER, USE_STATUS, DIRECT_SEASON_START_MONTH_1, DIRECT_DIV_SEASON_END_MONTH_1, DIRECT_SEASON_START_MONTH_2, DIRECT_DIV_SEASON_END_MONTH_2,
STORAGE_SEASON_START_MONTH_1, STORAGE_SEASON_END_MONTH_1, STORAGE_SEASON_START_MONTH_2, STORAGE_SEASON_END_MONTH_2, NO_DD_SEASON_INFO, NO_STOR_SEASON_INFO, NO_SEASON_INFO,
WRAP_AROUND_SEASON_DD, WRAP_AROUND_SEASON_STOR, JAN_DD_AUTH_NOTWRAPAROUND, FEB_DD_AUTH_NOTWRAPAROUND, MAR_DD_AUTH_NOTWRAPAROUND, APR_DD_AUTH_NOTWRAPAROUND, MAY_DD_AUTH_NOTWRAPAROUND,
JUN_DD_AUTH_NOTWRAPAROUND, JUL_DD_AUTH_NOTWRAPAROUND, AUG_DD_AUTH_NOTWRAPAROUND, SEP_DD_AUTH_NOTWRAPAROUND, OCT_DD_AUTH_NOTWRAPAROUND, NOV_DD_AUTH_NOTWRAPAROUND, DEC_DD_AUTH_NOTWRAPAROUND,
JAN_DD_AUTH_WRAPAROUND, FEB_DD_AUTH_WRAPAROUND, MAR_DD_AUTH_WRAPAROUND, APR_DD_AUTH_WRAPAROUND, MAY_DD_AUTH_WRAPAROUND, JUN_DD_AUTH_WRAPAROUND, JUL_DD_AUTH_WRAPAROUND, AUG_DD_AUTH_WRAPAROUND,
SEP_DD_AUTH_WRAPAROUND, OCT_DD_AUTH_WRAPAROUND, NOV_DD_AUTH_WRAPAROUND, DEC_DD_AUTH_WRAPAROUND, NO_DD_SEASON2_INFO, NO_STOR_SEASON2_INFO, NO_SEASON2_INFO, WRAP_AROUND_SEASON2_DD,
WRAP_AROUND_SEASON2_STOR, JAN_DD_AUTH_NOTWRAPAROUND2, FEB_DD_AUTH_NOTWRAPAROUND2, MAR_DD_AUTH_NOTWRAPAROUND2, APR_DD_AUTH_NOTWRAPAROUND2, MAY_DD_AUTH_NOTWRAPAROUND2, JUN_DD_AUTH_NOTWRAPAROUND2,
JUL_DD_AUTH_NOTWRAPAROUND2, AUG_DD_AUTH_NOTWRAPAROUND2, SEP_DD_AUTH_NOTWRAPAROUND2, OCT_DD_AUTH_NOTWRAPAROUND2, NOV_DD_AUTH_NOTWRAPAROUND2, DEC_DD_AUTH_NOTWRAPAROUND2, JAN_DD_AUTH_WRAPAROUND2,
FEB_DD_AUTH_WRAPAROUND2, MAR_DD_AUTH_WRAPAROUND2, APR_DD_AUTH_WRAPAROUND2, MAY_DD_AUTH_WRAPAROUND2, JUN_DD_AUTH_WRAPAROUND2, JUL_DD_AUTH_WRAPAROUND2, AUG_DD_AUTH_WRAPAROUND2,
SEP_DD_AUTH_WRAPAROUND2, OCT_DD_AUTH_WRAPAROUND2, NOV_DD_AUTH_WRAPAROUND2, DEC_DD_AUTH_WRAPAROUND2, JAN_DD_AUTH, FEB_DD_AUTH, MAR_DD_AUTH, APR_DD_AUTH, MAY_DD_AUTH, JUN_DD_AUTH, JUL_DD_AUTH,
AUG_DD_AUTH, SEP_DD_AUTH, OCT_DD_AUTH, NOV_DD_AUTH, DEC_DD_AUTH, JAN_STOR_AUTH_NOTWRAPAROUND2, FEB_STOR_AUTH_NOTWRAPAROUND2, MAR_STOR_AUTH_NOTWRAPAROUND2, APR_STOR_AUTH_NOTWRAPAROUND2,
MAY_STOR_AUTH_NOTWRAPAROUND2, JUN_STOR_AUTH_NOTWRAPAROUND2, JUL_STOR_AUTH_NOTWRAPAROUND2, AUG_STOR_AUTH_NOTWRAPAROUND2, SEP_STOR_AUTH_NOTWRAPAROUND2, OCT_STOR_AUTH_NOTWRAPAROUND2,
NOV_STOR_AUTH_NOTWRAPAROUND2, DEC_STOR_AUTH_NOTWRAPAROUND2, JAN_STOR_AUTH_WRAPAROUND2, FEB_STOR_AUTH_WRAPAROUND2, MAR_STOR_AUTH_WRAPAROUND2, APR_STOR_AUTH_WRAPAROUND2, MAY_STOR_AUTH_WRAPAROUND2,
JUN_STOR_AUTH_WRAPAROUND2, JUL_STOR_AUTH_WRAPAROUND2, AUG_STOR_AUTH_WRAPAROUND2, SEP_STOR_AUTH_WRAPAROUND2, OCT_STOR_AUTH_WRAPAROUND2, NOV_STOR_AUTH_WRAPAROUND2, DEC_STOR_AUTH_WRAPAROUND2,
JAN_STOR_AUTH_NOTWRAPAROUND, FEB_STOR_AUTH_NOTWRAPAROUND, MAR_STOR_AUTH_NOTWRAPAROUND, APR_STOR_AUTH_NOTWRAPAROUND, MAY_STOR_AUTH_NOTWRAPAROUND, JUN_STOR_AUTH_NOTWRAPAROUND, JUL_STOR_AUTH_NOTWRAPAROUND,
AUG_STOR_AUTH_NOTWRAPAROUND, SEP_STOR_AUTH_NOTWRAPAROUND, OCT_STOR_AUTH_NOTWRAPAROUND, NOV_STOR_AUTH_NOTWRAPAROUND, DEC_STOR_AUTH_NOTWRAPAROUND, JAN_STOR_AUTH_WRAPAROUND, FEB_STOR_AUTH_WRAPAROUND,
MAR_STOR_AUTH_WRAPAROUND, APR_STOR_AUTH_WRAPAROUND, MAY_STOR_AUTH_WRAPAROUND, JUN_STOR_AUTH_WRAPAROUND, JUL_STOR_AUTH_WRAPAROUND, AUG_STOR_AUTH_WRAPAROUND, SEP_STOR_AUTH_WRAPAROUND, OCT_STOR_AUTH_WRAPAROUND,
NOV_STOR_AUTH_WRAPAROUND, DEC_STOR_AUTH_WRAPAROUND, JAN_STOR_AUTH, FEB_STOR_AUTH, MAR_STOR_AUTH, APR_STOR_AUTH, MAY_STOR_AUTH, JUN_STOR_AUTH, JUL_STOR_AUTH, AUG_STOR_AUTH, SEP_STOR_AUTH, OCT_STOR_AUTH,
NOV_STOR_AUTH, DEC_STOR_AUTH, `1_DIRECT`, `2_DIRECT`, `3_DIRECT`, `4_DIRECT`, `5_DIRECT`, `6_DIRECT`, `7_DIRECT`, `8_DIRECT`, `9_DIRECT`, `10_DIRECT`, `11_DIRECT`, `12_DIRECT`, `1_STORAGE`, `2_STORAGE`,
`3_STORAGE`, `4_STORAGE`, `5_STORAGE`, `6_STORAGE`, `7_STORAGE`, `8_STORAGE`, `9_STORAGE`, `10_STORAGE`, `11_STORAGE`, `12_STORAGE`)
finalDF %>%
select(APPLICATION_NUMBER, JAN_DIRECT, FEB_DIRECT, MAR_DIRECT, APR_DIRECT, MAY_DIRECT, JUN_DIRECT, JUL_DIRECT, AUG_DIRECT, SEP_DIRECT, OCT_DIRECT, NOV_DIRECT, DEC_DIRECT, JAN_STORAGE, FEB_STORAGE, MAR_STORAGE,
APR_STORAGE, MAY_STORAGE, JUN_STORAGE, JUL_STORAGE, AUG_STORAGE, SEP_STORAGE, OCT_STORAGE, NOV_STORAGE, DEC_STORAGE)
finalDF %>%
select(APPLICATION_NUMBER, JAN_DIRECT, FEB_DIRECT, MAR_DIRECT, APR_DIRECT, MAY_DIRECT, JUN_DIRECT, JUL_DIRECT, AUG_DIRECT, SEP_DIRECT, OCT_DIRECT, NOV_DIRECT, DEC_DIRECT, JAN_STORAGE, FEB_STORAGE, MAR_STORAGE,
APR_STORAGE, MAY_STORAGE, JUN_STORAGE, JUL_STORAGE, AUG_STORAGE, SEP_STORAGE, OCT_STORAGE, NOV_STORAGE, DEC_STORAGE)
oosDF %>%
select(APPLICATION_NUMBER, YEAR, MONTH, AMOUNT, DIVERSION_TYPE,
`month in DIRECT season?`, `month in STOR season?`,
OUT_OF_SEASON_DIRECT, OUT_OF_SEASON_STOR, DIVERSION_OUT_OF_SEASON_RECORD)
# Start with the Part A workbook
wbA <- createWorkbook()
# Create a worksheet called "USE_SEASON_FLATFILE"
addWorksheet(wbA, "USE_SEASON_FLATFILE")
# Write data from 'diverDF' to this sheet
writeData(wbA, "USE_SEASON_FLATFILE", startRow = 3, startCol = 1,
diverDF %>%
select(APPLICATION_NUMBER, USE_STATUS, DIRECT_SEASON_START_MONTH_1, DIRECT_DIV_SEASON_END_MONTH_1, DIRECT_SEASON_START_MONTH_2, DIRECT_DIV_SEASON_END_MONTH_2,
STORAGE_SEASON_START_MONTH_1, STORAGE_SEASON_END_MONTH_1, STORAGE_SEASON_START_MONTH_2, STORAGE_SEASON_END_MONTH_2, NO_DD_SEASON_INFO, NO_STOR_SEASON_INFO, NO_SEASON_INFO,
WRAP_AROUND_SEASON_DD, WRAP_AROUND_SEASON_STOR, JAN_DD_AUTH_NOTWRAPAROUND, FEB_DD_AUTH_NOTWRAPAROUND, MAR_DD_AUTH_NOTWRAPAROUND, APR_DD_AUTH_NOTWRAPAROUND, MAY_DD_AUTH_NOTWRAPAROUND,
JUN_DD_AUTH_NOTWRAPAROUND, JUL_DD_AUTH_NOTWRAPAROUND, AUG_DD_AUTH_NOTWRAPAROUND, SEP_DD_AUTH_NOTWRAPAROUND, OCT_DD_AUTH_NOTWRAPAROUND, NOV_DD_AUTH_NOTWRAPAROUND, DEC_DD_AUTH_NOTWRAPAROUND,
JAN_DD_AUTH_WRAPAROUND, FEB_DD_AUTH_WRAPAROUND, MAR_DD_AUTH_WRAPAROUND, APR_DD_AUTH_WRAPAROUND, MAY_DD_AUTH_WRAPAROUND, JUN_DD_AUTH_WRAPAROUND, JUL_DD_AUTH_WRAPAROUND, AUG_DD_AUTH_WRAPAROUND,
SEP_DD_AUTH_WRAPAROUND, OCT_DD_AUTH_WRAPAROUND, NOV_DD_AUTH_WRAPAROUND, DEC_DD_AUTH_WRAPAROUND, NO_DD_SEASON2_INFO, NO_STOR_SEASON2_INFO, NO_SEASON2_INFO, WRAP_AROUND_SEASON2_DD,
WRAP_AROUND_SEASON2_STOR, JAN_DD_AUTH_NOTWRAPAROUND2, FEB_DD_AUTH_NOTWRAPAROUND2, MAR_DD_AUTH_NOTWRAPAROUND2, APR_DD_AUTH_NOTWRAPAROUND2, MAY_DD_AUTH_NOTWRAPAROUND2, JUN_DD_AUTH_NOTWRAPAROUND2,
JUL_DD_AUTH_NOTWRAPAROUND2, AUG_DD_AUTH_NOTWRAPAROUND2, SEP_DD_AUTH_NOTWRAPAROUND2, OCT_DD_AUTH_NOTWRAPAROUND2, NOV_DD_AUTH_NOTWRAPAROUND2, DEC_DD_AUTH_NOTWRAPAROUND2, JAN_DD_AUTH_WRAPAROUND2,
FEB_DD_AUTH_WRAPAROUND2, MAR_DD_AUTH_WRAPAROUND2, APR_DD_AUTH_WRAPAROUND2, MAY_DD_AUTH_WRAPAROUND2, JUN_DD_AUTH_WRAPAROUND2, JUL_DD_AUTH_WRAPAROUND2, AUG_DD_AUTH_WRAPAROUND2,
SEP_DD_AUTH_WRAPAROUND2, OCT_DD_AUTH_WRAPAROUND2, NOV_DD_AUTH_WRAPAROUND2, DEC_DD_AUTH_WRAPAROUND2, JAN_DD_AUTH, FEB_DD_AUTH, MAR_DD_AUTH, APR_DD_AUTH, MAY_DD_AUTH, JUN_DD_AUTH, JUL_DD_AUTH,
AUG_DD_AUTH, SEP_DD_AUTH, OCT_DD_AUTH, NOV_DD_AUTH, DEC_DD_AUTH, JAN_STOR_AUTH_NOTWRAPAROUND2, FEB_STOR_AUTH_NOTWRAPAROUND2, MAR_STOR_AUTH_NOTWRAPAROUND2, APR_STOR_AUTH_NOTWRAPAROUND2,
MAY_STOR_AUTH_NOTWRAPAROUND2, JUN_STOR_AUTH_NOTWRAPAROUND2, JUL_STOR_AUTH_NOTWRAPAROUND2, AUG_STOR_AUTH_NOTWRAPAROUND2, SEP_STOR_AUTH_NOTWRAPAROUND2, OCT_STOR_AUTH_NOTWRAPAROUND2,
NOV_STOR_AUTH_NOTWRAPAROUND2, DEC_STOR_AUTH_NOTWRAPAROUND2, JAN_STOR_AUTH_WRAPAROUND2, FEB_STOR_AUTH_WRAPAROUND2, MAR_STOR_AUTH_WRAPAROUND2, APR_STOR_AUTH_WRAPAROUND2, MAY_STOR_AUTH_WRAPAROUND2,
JUN_STOR_AUTH_WRAPAROUND2, JUL_STOR_AUTH_WRAPAROUND2, AUG_STOR_AUTH_WRAPAROUND2, SEP_STOR_AUTH_WRAPAROUND2, OCT_STOR_AUTH_WRAPAROUND2, NOV_STOR_AUTH_WRAPAROUND2, DEC_STOR_AUTH_WRAPAROUND2,
JAN_STOR_AUTH_NOTWRAPAROUND, FEB_STOR_AUTH_NOTWRAPAROUND, MAR_STOR_AUTH_NOTWRAPAROUND, APR_STOR_AUTH_NOTWRAPAROUND, MAY_STOR_AUTH_NOTWRAPAROUND, JUN_STOR_AUTH_NOTWRAPAROUND, JUL_STOR_AUTH_NOTWRAPAROUND,
AUG_STOR_AUTH_NOTWRAPAROUND, SEP_STOR_AUTH_NOTWRAPAROUND, OCT_STOR_AUTH_NOTWRAPAROUND, NOV_STOR_AUTH_NOTWRAPAROUND, DEC_STOR_AUTH_NOTWRAPAROUND, JAN_STOR_AUTH_WRAPAROUND, FEB_STOR_AUTH_WRAPAROUND,
MAR_STOR_AUTH_WRAPAROUND, APR_STOR_AUTH_WRAPAROUND, MAY_STOR_AUTH_WRAPAROUND, JUN_STOR_AUTH_WRAPAROUND, JUL_STOR_AUTH_WRAPAROUND, AUG_STOR_AUTH_WRAPAROUND, SEP_STOR_AUTH_WRAPAROUND, OCT_STOR_AUTH_WRAPAROUND,
NOV_STOR_AUTH_WRAPAROUND, DEC_STOR_AUTH_WRAPAROUND, JAN_STOR_AUTH, FEB_STOR_AUTH, MAR_STOR_AUTH, APR_STOR_AUTH, MAY_STOR_AUTH, JUN_STOR_AUTH, JUL_STOR_AUTH, AUG_STOR_AUTH, SEP_STOR_AUTH, OCT_STOR_AUTH,
NOV_STOR_AUTH, DEC_STOR_AUTH, `1_DIRECT`, `2_DIRECT`, `3_DIRECT`, `4_DIRECT`, `5_DIRECT`, `6_DIRECT`, `7_DIRECT`, `8_DIRECT`, `9_DIRECT`, `10_DIRECT`, `11_DIRECT`, `12_DIRECT`, `1_STORAGE`, `2_STORAGE`,
`3_STORAGE`, `4_STORAGE`, `5_STORAGE`, `6_STORAGE`, `7_STORAGE`, `8_STORAGE`, `9_STORAGE`, `10_STORAGE`, `11_STORAGE`, `12_STORAGE`))
# Add in the data from the second data frame next
writeData(wbA, "USE_SEASON_FLATFILE", startRow = 3, startCol = 166,
finalDF %>%
select(APPLICATION_NUMBER, JAN_DIRECT, FEB_DIRECT, MAR_DIRECT, APR_DIRECT, MAY_DIRECT, JUN_DIRECT, JUL_DIRECT, AUG_DIRECT, SEP_DIRECT, OCT_DIRECT, NOV_DIRECT, DEC_DIRECT, JAN_STORAGE, FEB_STORAGE, MAR_STORAGE,
APR_STORAGE, MAY_STORAGE, JUN_STORAGE, JUL_STORAGE, AUG_STORAGE, SEP_STORAGE, OCT_STORAGE, NOV_STORAGE, DEC_STORAGE))
# The final step for this spreadsheet is to add the text written throughout the sheet
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 2, startRow = 1, "INFO:")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 2, startRow = 2, "ACTION:")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 3, startRow = 1,
"INPUT DATA FOR SPREADSHEET - FROM FLAT FILES")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 3, startRow = 2,
"PASTE NEW INPUT DATA FROM [NAME OF SCRIPT] SCRIPT HERE - DELETE SAMPLE DATA BELOW")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 11, startRow = 1,
"FORMULA - INTERMEDIATE CALCULATION")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 11, startRow = 2,
"FILL DOWN FORMULA - DO NOT MODIFY FORMULA")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 141, startRow = 1,
"FORMULA - INTERMEDIATE CALCULATION")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 141, startRow = 2,
"FILL DOWN FORMULA - DO NOT MODIFY FORMULA")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 153, startRow = 1,
"FORMULA - INTERMEDIATE CALCULATION")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 153, startRow = 2,
"FILL DOWN FORMULA - DO NOT MODIFY FORMULA")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 166, startRow = 1,
"FINAL RESULTS - DIRECT DIVERSION SEASON")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 166, startRow = 2,
"Hit Enter  in cell FJ3; FILL DOWN FORMULA  for Cells FK - FV- DO NOT MODIFY FORMULA")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 179, startRow = 1,
"FINAL RESULTS - STORAGE DIVERSION SEASON")
writeData(wbA, "USE_SEASON_FLATFILE", startCol = 179, startRow = 2,
"FILL DOWN FORMULA - DO NOT MODIFY FORMULA")
# Save "wbA" to a workbook
saveWorkbook(wbA, "OutputData/Diversion_Out_of_Season_Part_A_Scripted.xlsx", overwrite = TRUE)
# Next, begin working on the workbook for Part B
wbB <- createWorkbook()
# This file will have two worksheets
addWorksheet(wbB, "DATA_FROM_PART_A")
addWorksheet(wbB, "DIVERSION_OUT_OF_SEASON")
# The first worksheet mainly contains data in 'finalDF'
writeData(wbB, "DATA_FROM_PART_A", startRow = 3, startCol = 1,
finalDF %>%
select(APPLICATION_NUMBER, JAN_DIRECT, FEB_DIRECT, MAR_DIRECT, APR_DIRECT, MAY_DIRECT, JUN_DIRECT, JUL_DIRECT, AUG_DIRECT, SEP_DIRECT, OCT_DIRECT, NOV_DIRECT, DEC_DIRECT, JAN_STORAGE, FEB_STORAGE, MAR_STORAGE,
APR_STORAGE, MAY_STORAGE, JUN_STORAGE, JUL_STORAGE, AUG_STORAGE, SEP_STORAGE, OCT_STORAGE, NOV_STORAGE, DEC_STORAGE))
# The "DIRECT" and "STORAGE" columns are then repeated in the worksheet
writeData(wbB, "DATA_FROM_PART_A", startRow = 3, startCol = 26,
finalDF %>%
select(JAN_DIRECT, FEB_DIRECT, MAR_DIRECT, APR_DIRECT, MAY_DIRECT, JUN_DIRECT, JUL_DIRECT, AUG_DIRECT, SEP_DIRECT, OCT_DIRECT, NOV_DIRECT, DEC_DIRECT, JAN_STORAGE, FEB_STORAGE, MAR_STORAGE,
APR_STORAGE, MAY_STORAGE, JUN_STORAGE, JUL_STORAGE, AUG_STORAGE, SEP_STORAGE, OCT_STORAGE, NOV_STORAGE, DEC_STORAGE))
# The column names should be different for the repeats from 'finalDF'
writeData(wbB, "DATA_FROM_PART_A", startRow = 3, startCol = 26,
c(1:12, 1:12) %>% matrix(nrow = 1) %>% data.frame(), colNames = FALSE)
# After that, add the descriptive text to the sheet
writeData(wbB, "DATA_FROM_PART_A", startRow = 1, startCol = 1, "INFO:")
writeData(wbB, "DATA_FROM_PART_A", startRow = 2, startCol = 1, "ACTION:")
writeData(wbB, "DATA_FROM_PART_A", startRow = 1, startCol = 2,
"INPUT DATA FOR SPREADSHEET - FROM PART_A")
writeData(wbB, "DATA_FROM_PART_A", startRow = 2, startCol = 2,
"PASTE AS DATA NEW INPUT DATA FROM PART_A DIRECT SEASON HERE - DELETE SAMPLE DATA BELOW")
writeData(wbB, "DATA_FROM_PART_A", startRow = 1, startCol = 14,
"INPUT DATA FOR SPREADSHEET - FROM PART_A")
writeData(wbB, "DATA_FROM_PART_A", startRow = 2, startCol = 14,
"PASTE NEW INPUT DATA FROM PART_A STORAGE SEASON HERE - DELETE SAMPLE DATA BELOW")
writeData(wbB, "DATA_FROM_PART_A", startRow = 1, startCol = 26,
"FORMULA - INTERMEDIATE CALCULATION")
writeData(wbB, "DATA_FROM_PART_A", startRow = 2, startCol = 26,
"FILL DOWN FORMULA - DO NOT MODIFY FORMULA")
# Add the second worksheet to 'wbB' next
addWorksheet(wbB, "DIVERSION_OUT_OF_SEASON")
# Next, begin working on the second sheet
# Add 'oosDF' to this sheet
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 1, startRow = 3,
oosDF %>%
select(APPLICATION_NUMBER, YEAR, MONTH, AMOUNT, DIVERSION_TYPE,
`month in DIRECT season?`, `month in STOR season?`,
OUT_OF_SEASON_DIRECT, OUT_OF_SEASON_STOR, DIVERSION_OUT_OF_SEASON_RECORD))
# After a gap column, add 'oosCounts' too
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 12, startRow = 3,
oosCounts)
# Then, fill in the explanatory text cells
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 1, startRow = 1, "INFO:")
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 1, startRow = 2, "ACTION:")
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 2, startRow = 1,
"INPUT DATA FOR SPREADSHEET - FROM WATER_USE_REPORT FLAT FILES")
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 2, startRow = 2,
"PASTE NEW INPUT DATA FROM [NAME OF SCRIPT] SCRIPT HERE - DELETE SAMPLE DATA BELOW")
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 6, startRow = 1,
"FORMULA - INTERMEDIATE CALCULATION")
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 6, startRow = 2,
"FILL DOWN FORMULA - DO NOT MODIFY FORMULA")
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 10, startRow = 1,
"RESULT - OUT OF SEASON DIVERSION")
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 10, startRow = 2,
"FILL DOWN FORMULAS")
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 12, startRow = 1,
"RESULT - NO OF OUT OF SEASON DIVERSIONS BY APPLICATION ID")
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 12, startRow = 2,
"ARRAY - DO NOT FILL")
writeData(wbB, "FILL DOWN", startCol = 13, startRow = 2,
"ARRAY - DO NOT FILL")
writeData(wbB, "DIVERSION_OUT_OF_SEASON", startCol = 13, startRow = 2,
"FILL DOWN")
# Finally, save 'wbB' to a file
saveWorkbook(wbB, "OutputData/Diversion_Out_of_Season_Part_B_Scripted.xlsx", overwrite = TRUE)
source("~/Github/DWRAT_DataScraping/Demand/Scripts/Diversion_Out_Of_Season.R")
mainProcedure()
# Read in the input CSV file "Missing_RMS_Reports_FINAL.csv"
reportDF <- read.csv("InputData/Missing_RMS_Reports_FINAL.csv")
Sys.Date()
source("C:/Users/aprashar/Documents/Github/DWRAT_DataScraping/Demand/Scripts/Missing_RMS_Reports.R")
year(Sys.Date())
year(Sys.Date())
# Define the end year for reports next
# It will be last year
reportEndYear <- year(Sys.Date()) - 1
# Define the default starting year for reports
# (It will be 2014)
reportStarYear <- 2014
reportDF %>% tibble()
# The first one is an intermediate column not in the module
# The year will be extracted from "ASSIGNED_PRIORITY_DATE" (it is the first four digits)
reportDF <- reportDF %>%
mutate(PRIORITY_YEAR = str_extract(ASSIGNED_PRIORITY_DATE, "^[0-9]{4}"))
reportDF %>% tibble()
# The first one is an intermediate column not in the module
# The year will be extracted from "ASSIGNED_PRIORITY_DATE" (it is the first four digits)
reportDF <- reportDF %>%
mutate(PRIORITY_YEAR = str_extract(ASSIGNED_PRIORITY_DATE, "^[0-9]{4}") %>% as.integer())
reportDF %>% tibble()
reportDF$PRIORITY_YEAR
reportDF$PRIORITY_YEAR %>% range()
reportDF$PRIORITY_YEAR %>% range(na.rm = TRUE)
reportDF$ASSIGNED_PRIORITY_DATE %>% range(na.rm = TRUE)
# Define the default starting year for reports
# (It will be 2014)
reportStarYear <- 2014
# Define the end year for reports next
# (It will be last year)
reportEndYear <- year(Sys.Date()) - 1
# Read in the input CSV file "Missing_RMS_Reports_FINAL.csv"
reportDF <- read.csv("InputData/Missing_RMS_Reports_FINAL.csv")
# Define the default starting year for reports
# (It will be 2014)
reportStarYear <- 2014
# Define the end year for reports next
# (It will be last year)
reportEndYear <- year(Sys.Date()) - 1
# Next, columns will be added to 'reportDF'
# The first one is an intermediate column not in the module
# The years will be extracted from "ASSIGNED_PRIORITY_DATE" (they're the first four digits of each number)
reportDF <- reportDF %>%
mutate(PRIORITY_YEAR = str_extract(ASSIGNED_PRIORITY_DATE, "^[0-9]{4}") %>% as.integer())
# The next column is "EXPECTED_REPORTS_BY_WR"
# This is an estimate of the number of expected reports
# It uses 'reportStarYear', 'reportEndYear', and the column "PRIORITY_YEAR"
reportDF <- reportDF %>%
mutate(EXPECTED_REPORTS_BY_WR = reportEndYear - max(reportStartYear, PRIORITY_YEAR) + 1)
source("C:/Users/aprashar/Documents/Github/DWRAT_DataScraping/Demand/Scripts/Missing_RMS_Reports.R")
# The main body of the script
# Read in the input CSV file "Missing_RMS_Reports_FINAL.csv"
reportDF <- read.csv("InputData/Missing_RMS_Reports_FINAL.csv")
# Define the default starting year for reports
# (It will be 2014)
reportStartYear <- 2014
# Define the end year for reports next
# (It will be last year)
reportEndYear <- year(Sys.Date()) - 1
# Next, columns will be added to 'reportDF'
# The first one is an intermediate column not in the module
# The years will be extracted from "ASSIGNED_PRIORITY_DATE" (they're the first four digits of each number)
reportDF <- reportDF %>%
mutate(PRIORITY_YEAR = str_extract(ASSIGNED_PRIORITY_DATE, "^[0-9]{4}") %>% as.integer())
# The next column is "EXPECTED_REPORTS_BY_WR"
# This is an estimate of the number of expected reports
# It uses 'reportStarYear', 'reportEndYear', and the column "PRIORITY_YEAR"
reportDF <- reportDF %>%
mutate(EXPECTED_REPORTS_BY_WR = reportEndYear - max(reportStartYear, PRIORITY_YEAR) + 1)
reportDF$EXPECTED_REPORTS_BY_WR
reportDF$EXPECTED_REPORTS_BY_WR %>% unique()
# The next column is "EXPECTED_REPORTS_BY_WR"
# This is an estimate of the number of expected reports
# It uses 'reportStarYear', 'reportEndYear', and the column "PRIORITY_YEAR"
reportDF <- reportDF %>%
rowwise() %>%
mutate(EXPECTED_REPORTS_BY_WR = reportEndYear - max(reportStartYear, PRIORITY_YEAR) + 1)
reportDF$EXPECTED_REPORTS_BY_WR %>% unique()
# The next column is "EXPECTED_REPORTS_BY_WR"
# This is an estimate of the number of expected reports
# It uses 'reportStarYear', 'reportEndYear', and the column "PRIORITY_YEAR"
reportDF <- reportDF %>%
mutate(EXPECTED_REPORTS_BY_WR =
if_else(PRIORITY_YEAR > reportStartYear,
reportEndYear - PRIORITY_YEAR + 1, reportEndYear - reportStartYear + 1))
# The next column is "EXPECTED_REPORTS_BY_WR"
# This is an estimate of the number of expected reports
# It uses 'reportStarYear', 'reportEndYear', and the column "PRIORITY_YEAR"
reportDF <- reportDF %>%
rowwise() %>%
mutate(EXPECTED_REPORTS_BY_WR = reportEndYear - max(reportStartYear, PRIORITY_YEAR) + 1)
# The next column is "EXPECTED_REPORTS_BY_WR"
# This is an estimate of the number of expected reports
# It uses 'reportStarYear', 'reportEndYear', and the column "PRIORITY_YEAR"
reportDF <- reportDF %>%
mutate(EXPECTED_REPORTS_BY_WR =
if_else(PRIORITY_YEAR > reportStartYear,
reportEndYear - PRIORITY_YEAR + 1, reportEndYear - reportStartYear + 1))
# The next column is "EXPECTED_REPORTS_BY_WR"
# This is an estimate of the number of expected reports
# It uses 'reportStarYear', 'reportEndYear', and the column "PRIORITY_YEAR"
reportDF <- reportDF %>%
rowwise() %>%
mutate(EXPECTED_REPORTS_BY_WR = reportEndYear - max(reportStartYear, PRIORITY_YEAR) + 1) %>%
ungroup()
?rowMeans
test <- reportDF %>% select(APPLICATION_NUMBER, EXPECTED_REPORTS_BY_WR)
test <- reportDF %>% select(APPLICATION_NUMBER, EXPECTED_REPORTS_BY_WR) %>% unique()
nrow(test)
length(unique(test$APPLICATION_NUMBER))
# Error Check
# Each application number should only appear once
stopifnot(nrow(expectedReports) == )
# After that, create a new data frame that has one row per application number
# It will only have two columns; the second column will be "EXPECTED_REPORTS_BY_WR"
expectedReports <- reportDF %>%
select(APPLICATION_NUMBER, EXPECTED_REPORTS_BY_WR) %>%
unique()
# Error Check
# Each application number should only appear once
stopifnot(nrow(expectedReports) == length(unique(expectedReports$APPLICATION_NUMBER)))
0 %in% expectedReports$EXPECTED_REPORTS_BY_WR
NA %in% expectedReports$EXPECTED_REPORTS_BY_WR
NA == NA
real(1)
?as.double
is.numeric(3.5)
is.numeric(3L)
is.double(3L)
as.integer(3.5)
as.integer(3.7)
trunc(2.9)
trunc(2.99999999999)
round(1.2, 2)
round(1.2, 1)
round(1.2, 0)
#
expectedReports %>%
group_by(APPLICATION_NUMBER)
#
reportDF %>%
group_by(APPLICATION_NUMBER)
#
reportDF %>%
select(APPLICATION_NUMBER, YEAR) %>%
unique()
#
reportDF %>%
select(APPLICATION_NUMBER, YEAR) %>%
unique() %>%
group_by(APPLICATION_NUMBER) %>%
summarize(COUNTS = n())
#
reportDF %>%
filter(YEAR >= 2014) %>%
select(APPLICATION_NUMBER, YEAR) %>%
unique() %>%
group_by(APPLICATION_NUMBER) %>%
summarize(COUNTS = n())
#
reportDF %>%
filter(YEAR >= 2014) %>%
select(APPLICATION_NUMBER, YEAR) %>%
unique() %>%
group_by(APPLICATION_NUMBER) %>%
summarize(ANNUAL_REPORTS_SUBMITTED = n())
#
reportCounts <- reportDF %>%
filter(YEAR >= 2014) %>%
select(APPLICATION_NUMBER, YEAR) %>%
unique() %>%
group_by(APPLICATION_NUMBER) %>%
summarize(ANNUAL_REPORTS_SUBMITTED = n())
names(expectedReports)
names(reportCounts)
# The main body of the script
# Read in the input CSV file "Missing_RMS_Reports_FINAL.csv"
reportDF <- read.csv("InputData/Missing_RMS_Reports_FINAL.csv")
# Define the default starting year for reports
# (It will be 2014)
reportStartYear <- 2014
# Define the end year for reports next
# (It will be last year)
reportEndYear <- year(Sys.Date()) - 1
# Next, columns will be added to 'reportDF'
# The first one is an intermediate column not in the module
# The years will be extracted from "ASSIGNED_PRIORITY_DATE" (they're the first four digits of each number)
reportDF <- reportDF %>%
mutate(PRIORITY_YEAR = str_extract(ASSIGNED_PRIORITY_DATE, "^[0-9]{4}") %>% as.integer())
# The next column is "EXPECTED_REPORTS_BY_WR"
# This is an estimate of the number of expected reports
# It uses 'reportStarYear', 'reportEndYear', and the column "PRIORITY_YEAR"
reportDF <- reportDF %>%
rowwise() %>%
mutate(EXPECTED_REPORTS_BY_WR = reportEndYear - max(reportStartYear, PRIORITY_YEAR) + 1) %>%
ungroup()
# After that, create a new data frame that has one row per application number
# It will only have two columns; the second column will be "EXPECTED_REPORTS_BY_WR"
expectedReports <- reportDF %>%
select(APPLICATION_NUMBER, EXPECTED_REPORTS_BY_WR) %>%
unique()
# Error Check
# Each application number should only appear once
stopifnot(nrow(expectedReports) == length(unique(expectedReports$APPLICATION_NUMBER)))
# Create another two-column data frame that also has only one row per application number
# The other column will be a count of the number of annual submissions made
reportCounts <- reportDF %>%
filter(YEAR >= 2014) %>%
select(APPLICATION_NUMBER, YEAR) %>%
unique() %>%
group_by(APPLICATION_NUMBER) %>%
summarize(ANNUAL_REPORTS_SUBMITTED = n())
# Merge these two data frames together
reportCounts <- reportCounts %>%
left_join(expectedReports, by = "APPLICATION_NUMBER", relationship = "one-to-one")
# Read in the input CSV file "Missing_RMS_Reports_FINAL.csv"
reportDF <- read.csv("InputData/Missing_RMS_Reports_FINAL.csv")
# Define the default starting year for reports
# (It will be 2014)
reportStartYear <- 2014
# Define the end year for reports next
# (It will be last year)
reportEndYear <- year(Sys.Date()) - 1
# Next, columns will be added to 'reportDF'
# The first one is an intermediate column not in the module
# The years will be extracted from "ASSIGNED_PRIORITY_DATE" (they're the first four digits of each number)
reportDF <- reportDF %>%
mutate(PRIORITY_YEAR = str_extract(ASSIGNED_PRIORITY_DATE, "^[0-9]{4}") %>% as.integer())
# The next column is "EXPECTED_REPORTS_BY_WR"
# This is an estimate of the number of expected reports
# It uses 'reportStarYear', 'reportEndYear', and the column "PRIORITY_YEAR"
reportDF <- reportDF %>%
rowwise() %>%
mutate(EXPECTED_REPORTS_BY_WR = reportEndYear - max(reportStartYear, PRIORITY_YEAR) + 1) %>%
ungroup()
# After that, create a new data frame that has one row per application number
# It will only have two columns; the second column will be "EXPECTED_REPORTS_BY_WR"
expectedReports <- reportDF %>%
select(APPLICATION_NUMBER, EXPECTED_REPORTS_BY_WR) %>%
unique()
# Error Check
# Each application number should only appear once
stopifnot(nrow(expectedReports) == length(unique(expectedReports$APPLICATION_NUMBER)))
# Create another two-column data frame that also has only one row per application number
# The other column will be a count of the number of annual submissions made
reportCounts <- reportDF %>%
filter(YEAR >= 2014) %>%
select(APPLICATION_NUMBER, YEAR) %>%
unique() %>%
group_by(APPLICATION_NUMBER) %>%
summarize(ANNUAL_REPORTS_SUBMITTED = n())
# Merge these two data frames together
reportCounts <- reportCounts %>%
left_join(expectedReports, by = "APPLICATION_NUMBER", relationship = "one-to-one")
# Add another column to 'reportCounts'
reportCounts <- reportCounts %>%
mutate(NO_OF_MISSING_ANNUAL_REPORTS = EXPECTED_REPORTS - ANNUAL_REPORTS_SUBMITTED)
names(reportCounts)
# Add another column to 'reportCounts'
reportCounts <- reportCounts %>%
mutate(NO_OF_MISSING_ANNUAL_REPORTS = EXPECTED_REPORTS_BY_WR - ANNUAL_REPORTS_SUBMITTED)
reportCounts$NO_OF_MISSING_ANNUAL_REPORTS %>% unique()
