ndays
# Set up RSelenium ----
# Open a chrome browser session with RSelenium
rs_driver_object <-rsDriver(
browser = 'chrome',
chromever ='108.0.5359.71',
port = free_port(),
)
eCaps <- list(
chromeOptions =
list(prefs = list(
"profile.default_content_settings.popups" = 0L,
"download.prompt_for_download" = FALSE,
"download.default_directory" = gsub(pattern = '/', replacement = '\\\\', x = here("WebData")) # download.dir
)
)
)
remDr <- rs_driver_object$client
#Create a list to hold CIMIS dataframes
DF_List <- list()
#Navigate to CIMIS----
for (i in 1:nrow(Stations)){
#i=1
remDr$navigate(paste0("https://ipm.ucanr.edu/calludt.cgi/WXSTATIONDATA?MAP=&STN=", Stations$Alias[i]))
#Input Dates
StartMonth <- remDr$findElement(using = "name", value = "FROMMONTH")
StartMonth$sendKeysToElement(list(StartDate$month))
StartDay <- remDr$findElement(using = "name", value = "FROMDAY")
StartDay$sendKeysToElement(list(StartDate$day))
StartYear <- remDr$findElement(using = "name", value = "FROMYEAR")
StartYear$sendKeysToElement(list(StartDate$year))
EndMonth <- remDr$findElement(using = "name", value = "THRUMONTH")
EndMonth$sendKeysToElement(list(EndDate$month))
EndDay <-remDr$findElement(using = "name", value = "THRUDAY")
EndDay$sendKeysToElement(list(EndDate$day))
EndYear <-remDr$findElement(using = "name", value = "THRUYEAR")
EndYear$sendKeysToElement(list(EndDate$year))
#Use no backups
Backups <- remDr$findElement(using = "name", value = "NONE")
Backups$clickElement()
#Uncheck unnecessary checkboxes
Soil <- remDr$findElement(using = "name", value = "DT_SOIL")
Soil$clickElement()
Wind <- remDr$findElement(using = "name", value = "DT_WIND")
Wind$clickElement()
RH <- remDr$findElement(using = "name", value = "DT_RH")
RH$clickElement()
ET <- remDr$findElement(using = "name", value = "DT_ET")
ET$clickElement()
Solar <- remDr$findElement(using = "name", value = "DT_SOLAR")
Solar$clickElement()
#Metric Units
Metric <- remDr$findElement(using = "xpath", "//input[@value = 'M']")
Metric$clickElement()
#Comma delimited format
Comma <- remDr$findElement(using = "xpath", "//input[@value = 'T']")
Comma$clickElement()
#Retrieve Report
Report <-remDr$findElement(using = "xpath", "//input[@value = 'RETRIEVE DATA']")
Report$clickElement()
#Grab the Data
WeatherData <- remDr$findElement(using = "xpath", "//pre")
WeatherDataText <-WeatherData$getElementText() %>% unlist() %>% data.frame()
#Manipulate CIMIS Data After Download----
WeatherDataBody <- substring(WeatherDataText, 2551, nchar(WeatherDataText))
WeatherDataBody <-gsub("\\\n", " ", WeatherDataBody) #Remove \n from
WeatherDataBody <-gsub(" ", "", WeatherDataBody) #remove blank spaces
WeatherDataBody <- strsplit( WeatherDataBody, ",") %>% unlist %>% data.frame() #split by commas
#Force WeatherDataBody into a dataframe with 19 columns
WeatherDataBody <- split(WeatherDataBody,rep(1:(nrow(WeatherDataBody)/19),each=19)) %>% data.frame %>% t() %>% data.frame()
#Drop the last 12 columns
WeatherDataBody <-select(WeatherDataBody, -c(X8:X19))
#Add column headers to WeatherDataBody
Headers <- c("Station","Date","Time","Precip","type","Tmax","Tmin")
colnames(WeatherDataBody) = Headers
#Drop Time and type columns
WeatherDataBody <- select(WeatherDataBody, -c("Time", "type"))
DF_List[[i]] <- WeatherDataBody
}
#Finalize CIMIS Data For Exportation To CSV----
#Name the individual RAWS dataframes in DF_List
names(DF_List) <- lapply(seq_along(DF_List),
function(i) names(DF_List)[[i]] = paste0("CIMIS_", Stations$Station[i]))
#Extract dataframes from DF_List
lapply(names(DF_List), function(i)
assign(x = i, value = DF_List[[i]], .GlobalEnv))
#Finalize CIMIS Sanel Valley 106
CIMIS_Sanel_Valley_106 = `CIMIS_Sanel Valley 106`
rm(`CIMIS_Sanel Valley 106`)
CIMIS_Sanel_Valley_106$Precip = NULL
#Finalize CIMIS Santa Rosa 83
CIMIS_Santa_Rosa_83 = `CIMIS_Santa Rosa 83`
rm(`CIMIS_Santa Rosa 83`)
CIMIS_Santa_Rosa_83$Precip = NULL
#Finalize CIMIS Windsor 103
CIMIS_Windsor_103 = `CIMIS_Windsor 103`
rm(`CIMIS_Windsor 103`)
CIMIS_Windsor_103$Tmin = NULL
CIMIS_Windsor_103$Tmax = NULL
#Finalize CIMIS Hopland 85 (just consists of -999)
CIMIS_Hopland_85 <- cbind.data.frame(seq(from = StartDate$date, to = EndDate$date, by = 'day'), rep(-999,ndays))
colnames(CIMIS_Hopland_85) <- c("Date", "Precipitation")
##Export Dataframes to CSVs----
write.csv(CIMIS_Windsor_103, here("ProcessedData/CIMIS_PRECIP12.csv"), row.names = FALSE)
write.csv(CIMIS_Sanel_Valley_106, here("ProcessedData/CIMIS_TEMP3.csv"), row.names = FALSE)
write.csv(CIMIS_Santa_Rosa_83, here("ProcessedData/CIMIS_TEMP4.csv"), row.names = FALSE)
write.csv(CIMIS_Hopland_85, here("ProcessedData/CIMIS_PRECIP6.csv"), row.names = FALSE)
# Set up RSelenium -------------------------------------------------------
## load packages ----
library(RSelenium)
library(tidyverse)
library(netstat)
library(here)
library(dplyr)
library(readr)
# Import CNRFC Temperature stations----
CNRFC_Stations <- read.csv("InputData/CNRFC_Stations.csv")
##Set Default download folder ----
eCaps <- list(
chromeOptions =
list(prefs = list(
"profile.default_content_settings.popups" = 0L,
"download.prompt_for_download" = FALSE,
"download.default_directory" = gsub(pattern = '/', replacement = '\\\\', x = here("WebData")) # download.dir
)
)
)
default_folder <- eCaps$chromeOptions$prefs$download.default_directory
#
## Open a chrome browser session with RSelenium ----
rs_driver_object <-rsDriver(
browser = 'chrome',
chromever ='108.0.5359.71',
port = free_port(),
extraCapabilities = eCaps
)
remDr <- rs_driver_object$client
#Navigate to CNRFC website
for (i in 1:nrow(CNRFC_Stations)){
CNRFC <- paste0("https://www.cnrfc.noaa.gov/temperaturePlots_hc.php?id=", CNRFC_Stations$Stations[i])
remDr$navigate(CNRFC)
#Select Chart Menu
ChartMenu <- remDr$findElement(using = "xpath", "//button[@aria-label = 'View chart menu']")
ChartMenu$clickElement()
#Download as CSV
CSVDownload <- remDr$findElement(using = "xpath", "//ul//li[contains(., 'CSV')]")
CSVDownload$clickElement()
}
#THIS SCRIPT IS EXPERIMENTAL AND DOES NOT WORK YET#
#LAST UPDATED BY: PAYMAN ALEMI ON 1/11/2023
## load packages
library(tidyverse)
library(netstat)
library(here)
library(dplyr)
library(readr)
library(lubridate)
#Import CNRFC precipitation CSV
CNRFC_precip = read.csv(here("WebData/cnrfc_qpf.csv"), header = FALSE)
CNRFC_precip$V28 = NULL
StartDate = as.Date(CNRFC_precip[2,4])
StartDate = as_datetime(CNRFC_precip[2,4])
View(CNRFC_precip)
nchar(CNRFC_precip[2,4])
as.POSIXct((CNRFC_precip[2,4]), format="%Y-%m-%d %H:%M:%S", tz="UTC")
CNRFC_precip[2,4]
guess_formats(CNRFC_precip[2,4])
guess_formats[CNRFC_precip[2,4], order = "mdy", print_matches = TRUE)
guess_formats(CNRFC_precip[2,4], order = "mdy", print_matches = TRUE)
guess = guess_formats[CNRFC_precip[2,4], order = "mdy", print_matches = TRUE)
guess = guess_formats(CNRFC_precip[2,4], order = "mdy", print_matches = TRUE)
guess
guess
as.POSIXct(CNRFC_precip[2,4], tz = "UTC", format = "%m/%d/%Y/%H/%M")
CNRFC_precip[2,4]
mdy_hm(CNRFC_precip[2,4])
View(CNRFC_precip)
mdy_hm(CNRFC_precip[2,4:27])
mdy_hm(CNRFC_precip[2:3,4:27]
mdy_hm(CNRFC_precip[2:3,4:27])
CNRFC_precip[2,4:27] = mdy_hm(CNRFC_precip[2,4:27])
CNRFC_precip[2,4:27] = mdy_hm(CNRFC_precip[2,4:27]) #converts strings to dates in mm/dd/yyyy hh:mm UTC format
CNRFC_precip[3,4:27] = mdy_hm(CNRFC_precip[3,4:27])
View(CNRFC_precip)
mdy_hm(CNRFC_precip[2,4:27])
CNRFC_precip = read.csv(here("WebData/cnrfc_qpf.csv"), header = FALSE)
CNRFC_precip$V28 = NULL
nchar(CNRFC_precip[2,4])
mdy_hm(CNRFC_precip[2,4:27])
CNRFC_precip[2,4:27] = mdy_hm(CNRFC_precip[2,4:27])
View(CNRFC_precip)
garbage = mdy_hm(CNRFC_precip[2,4:27])
garbage = mdy_hm(CNRFC_precip[2,4:27])
CNRFC_precip = read.csv(here("WebData/cnrfc_qpf.csv"), header = FALSE)
CNRFC_precip$V28 = NULL
nchar(CNRFC_precip[2,4])
garbage = mdy_hm(CNRFC_precip[2,4:27])
StartDates = mdy_hm(CNRFC_precip[2,4:27]) #converts strings to dates in mm/dd/yyyy hh:mm UTC format
EndDates = mdy_hm(CNRFC_precip[3,4:27])
StartDates = mdy_hm(CNRFC_precip[2,4:27]) %>% data.frame()
EndDates = mdy_hm(CNRFC_precip[3,4:27]) %>% data.frame()
View(EndDates)
View(CNRFC_precip)
CNRFC_Stations <- read.csv("InputData/CNRFC_Stations.csv")
#THIS SCRIPT IS EXPERIMENTAL AND DOES NOT WORK YET#
#LAST UPDATED BY: PAYMAN ALEMI ON 1/11/2023
## load packages
library(tidyverse)
library(netstat)
library(here)
library(dplyr)
library(readr)
library(lubridate)
#Import Data
Stations = read.csv(here("InputData/CNRFC_Stations.csv"))
CNRFC_precip = read.csv(here("WebData/cnrfc_qpf.csv"), header = FALSE)
CNRFC_precip$V28 = NULL
nchar(CNRFC_precip[2,4])
#use the mdy_hm() function from lubridate
StartDates = mdy_hm(CNRFC_precip[2,4:27]) %>% data.frame()
EndDates = mdy_hm(CNRFC_precip[3,4:27]) %>% data.frame()
#Filter CNRFC_precipitation to just the stations we care about
View(CNRFC_precip)
View(CNRFC_precip)
nchar(CNRFC_precip[1,6])
ncharc(CNRFC,precip[6,1])
nchar(CNRFC_precip$V1[9])
CNRFC_precip_data = inner_join(x = CNRFC_precip,
y = Stations,
by = c("V1" = "PrecipStation"))
View(CNRFC_precip_data)
CNRFC_precip_data$TempStation = NULL #Drop TempStation column
CNRFC_precip_data$V2 = NULL
CNRFC_precip_data$v3 = NULL
#Drop unnecessary columns
CNRFC_precip_data$V2 = NULL
CNRFC_precip_data$v3 = NULL
CNRFC_precip_data$TempStation = NULL
CNRFC_precip_data$V3 = NULL
View(CNRFC_precip_data)
StartDates = mdy_hm(CNRFC_precip[2,4:27]) %>% data.frame() %>% as.Date()
StartDates = mdy_hm(CNRFC_precip[2,4:27]) %>% data.frame()
date(StartDates)
typeof(StartDates)
typeof(StartDates[1])
StartDates[1]
colnames(StartDates) = "Date"
colnames(EndDates) = "Date"
StartDates$Date
StartDates$Date[1]
typeof[StartDates$Date[1])
typeof(StartDates$Date[1])
date(StartDates$Date[1])
date(StartDates$Date)
StartDates = date(StartDates$Date)
EndDates = date(EndDates$Date)
EndDates
View(CNRFC_precip)
View(CNRFC_precip)
StartDates = c("StartDate", StartDates)
StartDates = mdy_hm(CNRFC_precip[2,4:27]) %>% data.frame()
colnames(StartDates) = "Date"
StartDates = date(StartDates$Date)
StartDates = mdy_hm(CNRFC_precip[2,4:27]) %>% data.frame()
colnames(StartDates) = "Date"
StartDates = date(StartDates$Date) %>% data.frame()
EndDates = mdy_hm(CNRFC_precip[3,4:27]) %>% data.frame()
colnames(EndDates) = "Date"
EndDates = date(EndDates$Date) %>% data.frame()
CNRFC_precip_data[1]
CNRFC_precip_data[2]
View(CNRFC_precip_data)
select(CNRFC_precip_data, c(2:25))
select(CNRFC_precip_data, c(2:25))*25.4
select(CNRFC_precip_data, c(2:25)) %>% as.numeric()
sapply(CNRFC_precip_data[,2:25], as.numeric)
typeof(CNRFC_precip_data$V10)
CNRFC_precip_data[,2:25]= sapply(CNRFC_precip_data[,2:25], as.numeric)
CNRFC_Stations <- read.csv("~/Github/DWRAT_DataScraping/InputData/CNRFC_Stations.csv")
View(CNRFC_Stations)
CNRFC_precip = read.csv("~/Github/DWRAT_DataScraping/WebData/cnrfc_qpf.csv")
CNRFC_precip = read.csv("~/Github/DWRAT_DataScraping/WebData/cnrfc_qpf.csv", headers = FALSE)
library(here)
CNRFC_precip = read.csv("~/Github/DWRAT_DataScraping/WebData/cnrfc_qpf.csv", header = FALSE)
CNRFC_precip_data[,2:25]*25.4
View(CNRFC_precip_data)
CNRFC_precip_data[,2:25] = CNRFC_precip_data[,2:25]*25.4
View(CNRFC_precip_data)
#Write to CSV
write.csv(CNRFC_precip_data, here("ProcessedData\CNRFC_Precip_Data.csv", row.names= FALSE))
#Write to CSV
write.csv(CNRFC_precip_data, here("ProcessedData/CNRFC_Precip_Data.csv", row.names= FALSE))
library(tidyverse)
library(netstat)
library(here)
library(dplyr)
library(readr)
library(lubridate)
here()
write.csv(CNRFC_precip_data, here("ProcessedData/CNRFC_Precip_Data.csv", row.names= FALSE))
write.csv(CNRFC_precip_data, here("ProcessedData/CNRFC_Precip_Data.csv", row.names= FALSE))
write.csv(CNRFC_precip_data, here("ProcessedData/CNRFC_Precip_Data.csv", row.names= FALSE))
write.csv(CNRFC_precip_data, here("ProcessedData/CNRFC_Precip_Data.csv"), row.names= FALSE)
#Load libraries
library(dplyr)
library(tidyverse)
library(tidyr)
library(here)
library(lubridate)
#Import Downsizer Data
Downsizer = read.csv(file = here("InputData/2023.01.11.csv"))
Headers = read.csv(file = here("InputData/Downsizer_Stations.csv"))
#Account for timeframe of interest
StartDate = data.frame("December", "15", "2022", as.Date("2022-12-15"))
EndDate = data.frame("January", "10", "2023", as.Date("2023-01-10"))
colnames(StartDate) = c("month", "day", "year", "date")
colnames(EndDate) = c("month", "day", "year", "date")
ndays = seq(from = StartDate$date, to = EndDate$date, by = 'day')%>% length()
ndays
TimeFrame = seq(from = StartDate$date, to = EndDate$date, by = 'day')
#Extract the weather data from Downsizer----
#Drop the first 42 rows of Downsizer
Downsizer2 = tail(Downsizer, nrow(Downsizer)-42)
colnames(Downsizer2) = "Downsizer"
Downsizer3 = str_split(string = Downsizer2$Downsizer, pattern = " ", n= Inf) %>% unlist() %>% data.frame()
#Force Downsizer into a dataframe with a row for every day and 36 columns
Downsizer4 = split(Downsizer3, rep(x = Downsizer3, times = 36, each = nrow(Downsizer3)/36)) %>% data.frame()
View(Downsizer3)
rep(1:(nrow(Downsizer3)/36),each=36)
split(Downsizer3, rep(1:(nrow(Downsizer3)/36),each=36))
Downsizer3 %>% separate(Downsizer2$Downsizer, into, sep = " ", remove = TRUE, convert = FALSE)
rlang::last_error()
Downsizer2$Downsizer2 %>% separate(Downsizer2$Downsizer, into, sep = " ", remove = TRUE, convert = FALSE)
View(Downsizer2)
separate(Downsizer2, "Downsizer", into, sep = " ", remove = TRUE, convert = FALSE)
separate(data = Downsizer2, col = "Downsizer", into = Headers, sep = " ", remove = TRUE, convert = FALSE)
rlang::last_error()
rlang::last_trace()
Headers
separate(data = Downsizer2, col = "Downsizer", into = c("// 049684			precip	39.4194		-123.3425		1353", "// 047109			precip	39.3619		-123.1286		1018", "// 049122			precip	39.1466		-123.2102		636", "// 049126			precip	39.1266		-123.2719		1328", "// 041838			precip	38.793		-123.0263		400", "// 043875			precip	38.6294		-122.8665		177", "// 041312			precip	38.5768		-122.5781		350", "// 043191			precip	38.515		-123.2447		112", "// 043578			precip	38.4305		-122.8647		200", "// 046370			precip	38.3858		-122.9661		865", "// 049684			tmax	39.4194		-123.3425		1353", "// 047109			tmax	39.3619		-123.1286		1018", "// 049122			tmax	39.1466		-123.2102		636", "// 049126			tmax	39.1266		-123.2719		1328", "// 041838			tmax	38.793		-123.0263		400", "// 043875			tmax	38.6294		-122.8665		177", "// 041312			tmax	38.5768		-122.5781		350", "// 043191			tmax	38.515		-123.2447		112", "// 043578			tmax	38.4305		-122.8647		200", "// 046370			tmax	38.3858		-122.9661		865", "// 049684			tmin	39.4194		-123.3425		1353", "// 047109			tmin	39.3619		-123.1286		1018", "// 049122			tmin	39.1466		-123.2102		636", "// 049126			tmin	39.1266		-123.2719		1328", "// 041838			tmin	38.793		-123.0263		400", "// 043875			tmin	38.6294		-122.8665		177", "// 041312			tmin	38.5768		-122.5781		350", "// 043191			tmin	38.515		-123.2447		112", "// 043578			tmin	38.4305		-122.8647		200", "// 046370			tmin	38.3858		-122.9661		865")
, sep = " ", remove = TRUE, convert = TRUE)
View(Downsizer2)
Downsizer2 = tail(Downsizer, nrow(Downsizer)-42) %>%t()
colnames(Downsizer2) = "Downsizer"
Downsizer2 = tail(Downsizer, nrow(Downsizer)-42) %>%t() %>%data.frame()
View(Downsizer2)
#SCRIPT LAST UPDATED:
#BY: Payman Alemi
#ON: 1/11/2023
#install packages----
#you should only have to do this once ever on your computer; then comment
#out this portion of the script
# install.packages('RSelenium')
# install.packages('rvest')
# install.packages('tidyverse')
# install.packages('netstat')
# install.packages('here')
# install.packages('dplyr')
# install.packages('readr')
#load packages ----
library(RSelenium)
library(rvest)
library(tidyverse)
library(netstat)
library(here)
library(dplyr)
library(readr)
#Set up RSelenium----
##Set Default download folder ----
eCaps <- list(
chromeOptions =
list(prefs = list(
"profile.default_content_settings.popups" = 0L,
"download.prompt_for_download" = FALSE,
"download.default_directory" = gsub(pattern = '/', replacement = '\\\\', x = here("WebData")) # download.dir
)
)
)
default_folder = here("WebData")
## Open browser ----
rs_driver_object <-rsDriver(
browser = 'chrome',
chromever ='111.0.5563.64',
port = free_port(),
)
remDr <- rs_driver_object$client
#Input Data----
#Import RAWS stations
Stations = read.csv(here("InputData/Raws_Stations.csv"))
#Define Timeframe for which you're downloading observed data
StartDate = data.frame("December", "15", "2022", as.Date("2022-12-15"))
EndDate = data.frame("January", "11", "2023", as.Date("2023-01-11"))
colnames(StartDate) = c("month", "day", "year", "date")
colnames(EndDate) = c("month", "day", "year", "date")
ndays = seq(from = StartDate$date, to = EndDate$date, by = 'day')%>% length()
ndays
#Scrape RAWS Data----
#Create list to hold RAWS dataframes
DF_List <- list()
#Navigate to RAWS website
#for (i in 1:nrow(Stations)){
i = 1
remDr$navigate(paste0("https://wrcc.dri.edu/cgi-bin/rawMAIN.pl?ca", Stations$Station[i]))
for (i in 1:nrow(Stations)){
#i = 1
remDr$navigate(paste0("https://wrcc.dri.edu/cgi-bin/rawMAIN.pl?ca", Stations$Station[i]))
#Switch to Left Frame named "List"
ListFrame <- remDr$findElement(using = "name", value = "List")
remDr$switchToFrame(ListFrame)
#Select Daily Summary Time Series Link
Link1 <- remDr$findElement(using = "link text", value = "Daily Summary Time Series")
Link1$clickElement()
#Switch to Right Frame named "Graph"
remDr$switchToFrame(NA)
GraphFrame <- remDr$findElement(using = "name", value = "Graph")
remDr$switchToFrame(GraphFrame)
# #Set the Starting Date
StartMonth <- remDr$findElement(using = "name", value = "smon")
StartMonth$sendKeysToElement(list(StartDate$month))
#
StartDay <- remDr$findElement(using = "name", value = "sday")
StartDay$sendKeysToElement(list(StartDate$day))
#
StartYear <- remDr$findElement(using = "name", value = "syea")
StartYear$sendKeysToElement(list(StartDate$year))
#Set the Ending Date
EndMonth <- remDr$findElement(using = "name", value = "emon")
EndMonth$sendKeysToElement(list(EndDate$month))
#
EndDay <- remDr$findElement(using = "name", value = "eday")
EndDay$sendKeysToElement(list(EndDate$day))
#
EndYear <- remDr$findElement(using = "name", value = "eyea")
EndYear$sendKeysToElement(list(EndDate$year))
#Uncheck "Elements marked with *" box
Elements <-remDr$findElement(using = "name", value = "qBasic")
Elements$clickElement()
#Select Air Temperature and Precipitation
Temp <- remDr$findElement(using = "name", value = "qAT")
Temp$clickElement()
Precip <- remDr$findElement(using = "name", value = "qPR")
Precip$clickElement()
#Select Metric Output units
Units <- remDr$findElement(using = "xpath", "//input[@value = 'M']")
Units$clickElement()
#Select HTML Output
Format <-remDr$findElement(using = "xpath", "//input[@value = 'H']")
Format$clickElement()
#Select the Data Summarization requirements
Summarization <-remDr$findElement(using = "xpath", "//input[@value = 'C']")
Summarization$clickElement()
#Apply physical limits QC to data
Limits <-remDr$findElement(using = "xpath", "//input[@value = 'Y' and @name = 'qc']")
Limits$clickElement()
#Represent Missing data as -999
Missing<-remDr$findElement(using = "name", value = "miss")
Missing$sendKeysToElement(list("-999"))
#Don't include valid observations for each element
Validity <-remDr$findElement(using = "xpath", "//input[@value = 'N' and @name = 'obs']")
Validity$clickElement()
#Click on Submit info button
Submit <-remDr$findElement(using = "xpath", "//input[@value = 'Submit Info']")
Submit$clickElement()
#Switch to Graph frame (the right hand frame)
remDr$switchToFrame(NA)
GraphFrame <- remDr$findElement(using = "name", value = "Graph")
remDr$switchToFrame(GraphFrame)
#Scrape from Graph Frame using RSelenium
WeatherData <- remDr$findElement(using = "xpath", "//table/tbody")
WeatherDataText <- WeatherData$getElementText() %>% unlist() %>% data.frame()
#Extract Raw Data from WeatherDataText----
nchar(WeatherDataText)
Headers <-substring(WeatherDataText,1,161)
Headers
WeatherDataBody <-substring(WeatherDataText, 162,nchar(WeatherDataText))
WeatherDataBody <- gsub("\\\n", " ", WeatherDataBody)
WeatherDataBody <- strsplit( WeatherDataBody, " ") %>% unlist %>% data.frame()
#Force WeatherDataBody into dataframe with 8 columns
WeatherDataBody <- split(WeatherDataBody,rep(1:ndays,each=8)) %>% data.frame %>% t() %>% data.frame()
DF_List[[i]] <- WeatherDataBody
}
#Name the individual RAWS dataframes in the list
names(DF_List) <- lapply(seq_along(DF_List),
function(i) names(DF_List)[[i]] = paste0("RAWS_", Stations$Station[i]))
#Set column names
RAWS_Names <- c("Date", "Year", "Day_Of_Year", "Day_Of_Run", "Tavg", "Tmax", "Tmin", "Precipitation")
#Apply column names to all dataframes
for (DF in seq_along(DF_List)){
colnames(DF_List[[DF]]) <- RAWS_Names
}
#Finalize WeatherDataBody for Exportation----
#Extract dataframes from DF_List
lapply(names(DF_List),function(x)
assign(x,DF_List[[x]],.GlobalEnv))
ls()
#Drop Temp columns from Boonville RAWS (CBOO)
RAWS_CBOO <- select(RAWS_CBOO, -c(Tavg: Tmin))
#Drop Precipitation column from  Santa Rosa RAWS station (CSRS)
RAWS_CSRS$Precipitation <- NULL
#Create RAWS Precipitation only dataframes for CHAW and CLYO
RAWS_CHAW_Precip <- select(RAWS_CHAW, -c(Tavg:Tmin))
RAWS_CLYO_Precip <- select(RAWS_CLYO, -c(Tavg:Tmin))
#Create RAWS Temperature only dataframes fro CHAW and CLYO
RAWS_CHAW_Temp <- select(RAWS_CHAW, -c(Precipitation))
RAWS_CLYO_Temp <- select(RAWS_CLYO, -c(Precipitation))
#Write all RAWS dataframes to CSVs----
write.csv(RAWS_CHAW_Precip, here("ProcessedData/RAWS_PRECIP9.csv"), row.names = FALSE)
write.csv(RAWS_CLYO_Precip, here("ProcessedData/RAWS_PRECIP4.csv"), row.names = FALSE)
write.csv(RAWS_CHAW_Temp, here("ProcessedData/RAWS_TEMP5.csv"), row.names = FALSE)
write.csv(RAWS_CLYO_Temp, here("ProcessedData/RAWS_TEMP7.csv"), row.names = FALSE)
write.csv(RAWS_CBOO, here("ProcessedData/RAWS_PRECIP7.csv"), row.names = FALSE)
write.csv(RAWS_CSRS, here("ProcessedData/RAWS_TEMP8.csv"), row.names = FALSE)
